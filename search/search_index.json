{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NutScript Developer Wiki","text":"<p> NutScript is a free roleplay framework created by Chessnut and Black Tea for use in the game Garry's Mod. Prior to NutScript's creation, Clockwork and OpenAura were the two main roleplaying frameworks. Since it's release, Nutscript has been gaining popularity due to it's DRM-free schema creation, and open source code. Nutscript 1.2 is a complete re-write of the framework. We recommend only using 1.2 branch located here: https://github.com/NutScript/NutScript.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Before you start using and developing using the NutScript Framework, you need to install and configure it. Go to the Getting Started guide.</p>"},{"location":"#developers","title":"Developers","text":"<p>Developers can view all the code documentation in the Developer Section.</p>"},{"location":"#wiki-contribution","title":"Wiki Contribution","text":"<p>Want to help improve the documentation and expand the wiki? Head over to the Wiki Contribution Section.</p>"},{"location":"#so-what-is-nutscript-a-tldr","title":"So what is NutScript? A TL:DR","text":""},{"location":"developer/","title":"Index","text":"List of Constructs Globals Name Summary Globals Global functions defined in NutScript. Libraries Name Summary nut.config Library for creating and setting config options within the framework. nut.char Character Management Library. nut.menu Library functions for nut.menu. nut.playerInteract Base library for the player interaction menu library. nut.item Item Module. nut.anim Animation Library. nut.chat Extended Chatbox Module. nut.class Class System module. nut.command Chat Command module. nut.currency Currency System. nut.date Date/Time module. nut.faction Faction System. nut.flag Flag System. nut.inventory Inventory System. nut.lang Language Module. nut.plugin Plugin Module. nut.db Database Module. nut.util Utility module. nut.data Data Persistence Utility. Classes Name Summary character Base character class. client Base class for players. entity Base class for entities. inventory Base inventory class. item Item Class. Hooks Name Summary PLUGIN Plugin Hook Documentation. Plugins Name Summary Area Designate areas within a map. Attributes Attributes that define various RPG stats of a character."},{"location":"developer/classes/Character/","title":"Character","text":"<p>Base character class.  A character is a unique entity tied to a player client. Each client can have multiple characters. The character stores information that is relevant to the gameplay, but not specific to the player themselves, for instance: their model, name, description, inventory, etc.</p> <p>All characters that a player owns are loaded into server memory upon the client connecting.</p>"},{"location":"developer/classes/Character/#methods","title":"Methods","text":"Character:save (callback) Character:sync (receiver) Character:setup (noNetworking) Character:kick () Character:ban (time) Character:delete () Character:destroy () Character:getPlayer ()"},{"location":"developer/classes/Character/#charactersave","title":"sv_Character:save","text":"<p>Saves the character to the database and calls the callback if provided. Parameters: function callback  Callback when character saved on database</p>"},{"location":"developer/classes/Character/#charactersync","title":"sv_Character:sync","text":"<p>Sends character information to the receiver. Parameters: Client receiver <code>optional</code>  who will receive synchronization, nil - so that all players receive.</p>"},{"location":"developer/classes/Character/#charactersetup","title":"sv_Character:setup","text":"<p>Sets up the \"appearance\" related information for the character. Parameters: boolean noNetworking  responsible for character synchronization</p>"},{"location":"developer/classes/Character/#characterkick","title":"sv_Character:kick","text":"<p>Forces the player to choose a character.</p>"},{"location":"developer/classes/Character/#characterban","title":"sv_Character:ban","text":"<p>Prevents the use of this character permanently or for a certain amount of time. Parameters: integer time  \u0421haracter ban time</p> <p>Usage: <ul> <pre><code>Entity(1):getChar():ban(3600) -- will send a character owned by a player with index 1 to a ban\n</code></pre> </ul></p>"},{"location":"developer/classes/Character/#characterdelete","title":"sv_Character:delete","text":"<p>Deletes this character from existence along with its associated data.</p>"},{"location":"developer/classes/Character/#characterdestroy","title":"sv_Character:destroy","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Deletes this character from memory.</p>"},{"location":"developer/classes/Character/#charactergetplayer","title":"sh_Character:getPlayer","text":"<p>Returns which player owns this character. Returns: player The player who owns need character</p> <p>Usage: <ul> <pre><code>local charOwner = Entity(1):getChar():getPlayer()\ncharOwner:notify('test')\n</code></pre> </ul></p>"},{"location":"developer/classes/Character/#class-related-methods","title":"Class-related methods","text":"Character:joinClass (class, isForced) Character:kickClass ()"},{"location":"developer/classes/Character/#characterjoinclass","title":"sh_Character:joinClass","text":"<p>Makes a character join a class Parameters: number class  Class index to join</p> <p>boolean isForced <code>optional. default</code>: <code>false</code>  Bypass restrictions if true</p> <p>Returns: bool Whether join was successful</p>"},{"location":"developer/classes/Character/#characterkickclass","title":"sh_Character:kickClass","text":"<p>Removes character from current class (joins default)</p>"},{"location":"developer/classes/Character/#currency-related-methods","title":"Currency-related methods","text":"Character:hasMoney (amount) Character:giveMoney (amount, takingMoney) Character:takeMoney (amount)"},{"location":"developer/classes/Character/#characterhasmoney","title":"sh_Character:hasMoney","text":"<p>Checks if character has sufficient funds Parameters: number amount  Amount to check</p> <p>Returns: bool Whether character has enough money</p>"},{"location":"developer/classes/Character/#charactergivemoney","title":"sh_Character:giveMoney","text":"<p>Gives money to character Parameters: number amount  Amount to give</p> <p>boolean takingMoney <code>optional. default</code>: <code>false</code>  Internal flag to skip logging</p> <p>Returns: bool Always returns true</p>"},{"location":"developer/classes/Character/#charactertakemoney","title":"sh_Character:takeMoney","text":"<p>Takes money from character Parameters: number amount  Amount to take</p> <p>Returns: bool Always returns true</p>"},{"location":"developer/classes/Character/#flag-related-methods","title":"Flag-related methods","text":"Character:setFlags (flags) Character:takeFlags (flags) Character:getFlags () Character:hasFlags (flags)"},{"location":"developer/classes/Character/#charactersetflags","title":"sv_Character:setFlags","text":"<p>Set the flag data to the character, overriding existing flags Parameters: string flags  New flags string</p>"},{"location":"developer/classes/Character/#charactertakeflags","title":"sv_Character:takeFlags","text":"<p>Remove the flags from the character. Parameters: string flags  Flags to remove</p>"},{"location":"developer/classes/Character/#charactergetflags","title":"sh_Character:getFlags","text":"<p>Gets character's current flags. Returns: string Current flags string</p>"},{"location":"developer/classes/Character/#characterhasflags","title":"sh_Character:hasFlags","text":"<p>Check if the character contains the flags specified. Parameters: string flags  Flags to check for</p> <p>Returns: bool Whether any flag is present</p>"},{"location":"developer/classes/Client/","title":"Client","text":"<p>Base class for players.</p> <p>The client, aka the Player, represents the base entity controlled by the physical player. A client can have more than one character attached, but a character can have no more and no less than 1 client attached.</p> <p>Functions and meta-methods defined in Gmod outside of NutScript typically target the client.</p>"},{"location":"developer/classes/Client/#methods","title":"Methods","text":"Client:steamName () Client:SteamName () Client:Nick () Client:GetName ()"},{"location":"developer/classes/Client/#clientsteamname","title":"sh_Client:steamName","text":"<p>Returns the players Steam name. Returns: string The player's Steam name.</p> <p>See also: <ul> <li>SteamName</li> </ul></p>"},{"location":"developer/classes/Client/#clientsteamname","title":"sh_Client:SteamName","text":"<p>Returns the players Steam name.  Alias to Player:steamName(). Returns: string The player's Steam name.</p> <p>See also: <ul> <li>steamName</li> </ul></p>"},{"location":"developer/classes/Client/#clientnick","title":"sh_Client:Nick","text":"<p>Returns the name of the player's character, or the player's Steam name if the character is not available.  Alias to Player:Name(). Returns: string The name of the player's character or the player's Steam name if no character is available.</p> <p>See also: <ul> <li>GetName</li> </ul></p>"},{"location":"developer/classes/Client/#clientgetname","title":"sh_Client:GetName","text":"<p>Returns the name of the player's character, or the player's Steam name if the character is not available.  Alias to Player:Name(). Returns: string The name of the player's character or the player's Steam name if no character is available.</p> <p>See also: <ul> <li>Nick</li> </ul></p>"},{"location":"developer/classes/Client/#animation-related-methods","title":"Animation-related methods","text":"Client:forceSequence (sequence, callback, time, noFreeze) Client:leaveSequence () Client:doGesture (a, b, c)"},{"location":"developer/classes/Client/#clientforcesequence","title":"sh_Client:forceSequence","text":"<p>Forces the player to play a specific animation sequence. Parameters: string sequence  Name of the sequence to play</p> <p>function callback <code>optional</code>  Function to call when sequence ends</p> <p>number time <code>optional</code>  Duration to play the sequence (defaults to sequence duration)</p> <p>boolean noFreeze <code>optional. default</code>: <code>false</code>  Whether to keep player movable during animation</p> <p>Returns: number or bool Duration of sequence if valid, false otherwise</p>"},{"location":"developer/classes/Client/#clientleavesequence","title":"sh_Client:leaveSequence","text":"<p>Stops the player's current forced animation sequence.</p>"},{"location":"developer/classes/Client/#clientdogesture","title":"sh_Client:doGesture","text":"<p>Performs a gesture animation and syncs it to other players. Parameters: integer a  Gesture slot or activity</p> <p>integer b  Gesture animation ID</p> <p>boolean c  Whether to auto-restart the gesture</p>"},{"location":"developer/classes/Client/#character-related-methods","title":"Character-related methods","text":"Client:getChar () Client:Name ()"},{"location":"developer/classes/Client/#clientgetchar","title":"sh_Client:getChar","text":"<p>Returns the character associated with the player. Returns: table The character object associated with the player, or nil if no character is associated.</p>"},{"location":"developer/classes/Client/#clientname","title":"sh_Client:Name","text":"<p>Returns the name of the player's character, or the player's Steam name if the character is not available. Returns: string The name of the player's character or the player's Steam name if no character is available.</p>"},{"location":"developer/classes/Client/#class-related-methods","title":"Class-related methods","text":"Client:getClass () Client:getClassData ()"},{"location":"developer/classes/Client/#clientgetclass","title":"sh_Client:getClass","text":"<p>Gets player's current class ID Returns: int Class ID if has character</p> <p>Or nil If no character</p>"},{"location":"developer/classes/Client/#clientgetclassdata","title":"sh_Client:getClassData","text":"<p>Gets player's current class data Returns: table Class definition table if has character and class</p> <p>Or nil If no character or class</p>"},{"location":"developer/classes/Client/#currency-related-methods","title":"Currency-related methods","text":"Client:addMoney (amt) Client:takeMoney (amt) Client:getMoney () Client:canAfford (amount)"},{"location":"developer/classes/Client/#clientaddmoney","title":"sv_Client:addMoney","text":"<p>Adds money to the player's character. Parameters: number amt  Amount to add</p>"},{"location":"developer/classes/Client/#clienttakemoney","title":"sv_Client:takeMoney","text":"<p>Removes money from the player's character. Parameters: number amt  Amount to subtract</p>"},{"location":"developer/classes/Client/#clientgetmoney","title":"sv_Client:getMoney","text":"<p>Gets the amount of money the player's character has. Returns: int Amount of money</p>"},{"location":"developer/classes/Client/#clientcanafford","title":"sv_Client:canAfford","text":"<p>Checks if the player's character can afford a given amount. Parameters: number amount  Amount to check</p> <p>Returns: bool True if the character has enough money</p>"},{"location":"developer/classes/Client/#player-data-methods","title":"Player data methods","text":"Client:getNutData (key, default) Client:syncVars () Client:setLocalVar (key, value) Client:getLocalVar (key, default) Client:loadNutData (callback) Client:saveNutData () Client:setNutData (key, value, noNetworking)"},{"location":"developer/classes/Client/#clientgetnutdata","title":"sh_Client:getNutData","text":"<p>Gets NutScript-specific player data Parameters: string key <code>optional</code>  Specific data key to retrieve</p> <p>vararg default  Default value if key not found</p> <p>Returns: table All player data when key is true</p> <p>Or any Specific data value when key provided</p> <p>Or any Default value when key not found</p> <p>Usage: <ul> <pre><code>local playTime = client:getNutData(\"playTime\", 0)\nlocal allData = client:getNutData(true)\n</code></pre> </ul></p>"},{"location":"developer/classes/Client/#clientsyncvars","title":"sv_Client:syncVars","text":"<p>Synchronizes all networked variables to this client.  Called when a player first spawns.</p>"},{"location":"developer/classes/Client/#clientsetlocalvar","title":"sv_Client:setLocalVar","text":"<p>Sets a networked variable that is only visible to this client. Parameters: string key  Variable name</p> <p>vararg value  Variable value</p>"},{"location":"developer/classes/Client/#clientgetlocalvar","title":"sh_Client:getLocalVar","text":"<p>Retrieves a networked variable from a client.  The clientside version of the function can only return data that was previously networked to the client.  Returns a default value if the variable is not set. Parameters: string key  The variable name</p> <p>vararg default <code>optional</code>  A fallback value to return if the key is not present</p> <p>Returns: vararg The stored value or the default</p>"},{"location":"developer/classes/Client/#clientloadnutdata","title":"sv_Client:loadNutData","text":"<p>Loads persistent NutScript-specific data for the player from the database.  If no data exists, inserts a new entry. Calls the callback with the result. Parameters: function callback  A function to call with the loaded data table</p>"},{"location":"developer/classes/Client/#clientsavenutdata","title":"sv_Client:saveNutData","text":"<p>Saves the player's NutScript-specific data to the database.  Updates name, last join timestamp, and data blob.</p>"},{"location":"developer/classes/Client/#clientsetnutdata","title":"sv_Client:setNutData","text":"<p>Sets a specific key in the player's persistent data and optionally sends it to the client. Parameters: string key  The key to set</p> <p>vararg value  The value to store</p> <p>boolean noNetworking <code>optional. default</code>: <code>false</code>  If true, skip sending the value to the client</p>"},{"location":"developer/classes/Client/#faction-related-methods","title":"Faction-related methods","text":"Client:hasWhitelist (faction) Client:setWhitelisted (faction, whitelisted)"},{"location":"developer/classes/Client/#clienthaswhitelist","title":"sh_Client:hasWhitelist","text":"<p>Checks if player has whitelist for a faction Parameters: number faction  Faction ID to check</p> <p>Returns: bool Whether player is whitelisted</p> <p>Usage: <ul> <pre><code>if client:hasWhitelist(FACTION_OTA) then print(\"Whitelisted\") end\n</code></pre> </ul></p>"},{"location":"developer/classes/Client/#clientsetwhitelisted","title":"sv_Client:setWhitelisted","text":"<p>Sets the player's whitelist status for a given faction.  Stores whitelist info under the current schema namespace. Parameters: integer faction  The faction index</p> <p>boolean whitelisted  Whether the player is whitelisted</p> <p>Returns: bool True if the faction was valid and updated, false otherwise</p>"},{"location":"developer/classes/Client/#item-related-methods","title":"Item-related methods","text":"Client:getItems ()"},{"location":"developer/classes/Client/#clientgetitems","title":"sh_Client:getItems","text":"<p>Gets all items from player's inventory Returns: table List of item objects if has character</p> <p>Or nil If no character or inventory</p>"},{"location":"developer/classes/Client/#general-utility-methods","title":"General Utility Methods","text":"<p>Provides various helper methods for player state, model analysis, weapon restrictions, and spatial queries.</p> Client:getPlayTime () Client:isRunning () Client:isFemale () Client:getItemDropPos () Client:setRestricted (state, noMessage)"},{"location":"developer/classes/Client/#clientgetplaytime","title":"sh_Client:getPlayTime","text":"<p>Returns how many seconds the player has spent on the server. Returns: int Total play time in seconds</p>"},{"location":"developer/classes/Client/#clientisrunning","title":"sh_Client:isRunning","text":"<p>Checks if the player is moving faster than their walking speed. Returns: bool True if running</p>"},{"location":"developer/classes/Client/#clientisfemale","title":"sh_Client:isFemale","text":"<p>Checks if the player has a female model.  Uses model name patterns and animation class. Returns: bool True if player model is recognized as female</p>"},{"location":"developer/classes/Client/#clientgetitemdroppos","title":"sh_Client:getItemDropPos","text":"<p>Returns a good position in front of the player for an entity.  Uses a forward trace and surface offset to avoid intersections. Returns: vector Position to drop item</p>"},{"location":"developer/classes/Client/#clientsetrestricted","title":"sv_Client:setRestricted","text":"<p>Restricts or unrestricts the player from interaction and weapons.  Removes weapons and disables input if restricted. Restores state on unrestrict. Parameters: boolean state  True to restrict, false to unrestrict</p> <p>boolean noMessage <code>optional. default</code>: <code>false</code>  If true, disables restriction messages</p>"},{"location":"developer/classes/Client/#player-action-utilities","title":"Player Action Utilities","text":"<p>Provides helper functions for performing timed and conditional actions on players, such as progress bars and stare-based interactions.</p> Client:setAction (text, time, callback, startTime, finishTime) Client:doStaredAction (entity, callback, time, onCancel, distance)"},{"location":"developer/classes/Client/#clientsetaction","title":"sv_Client:setAction","text":"<p>Sets a timed action for the player with a visual progress bar.  Cancels any existing action timer if <code>text</code> is false. Parameters: vararg text  Text (string) to display or <code>false</code> (<code>bool</code>) to cancel</p> <p>number time <code>optional. default</code>: <code>5</code>  Duration of the action in seconds</p> <p>function callback <code>optional</code>  Called when the action completes</p> <p>number startTime <code>optional</code>  Custom start time (default is CurTime())</p> <p>number finishTime <code>optional</code>  Custom finish time (default is start + time)</p>"},{"location":"developer/classes/Client/#clientdostaredaction","title":"sv_Client:doStaredAction","text":"<p>Performs a timed action while the player stares at an entity.  Cancels if the player looks away or either entity becomes invalid. Parameters: Entity entity  The entity the player must look at</p> <p>function callback  Called on successful completion</p> <p>number time  Duration to stare</p> <p>function onCancel <code>optional</code>  Called if the stare is interrupted or cancelled</p> <p>number distance <code>optional. default</code>: <code>96</code>  Maximum trace distance the player may be from the entity</p>"},{"location":"developer/classes/Client/#ragdoll-and-position-utilities","title":"Ragdoll and Position Utilities","text":"<p>Adds ragdolling, stuck detection, and spatial logic for positioning and restoring players.</p> Client:isStuck () Client:createRagdoll (freeze) Client:setRagdolled (state, time, getUpGrace)"},{"location":"developer/classes/Client/#clientisstuck","title":"sv_Client:isStuck","text":"<p>Checks if the player is stuck in geometry. Returns: bool True if the player is inside solid geometry</p>"},{"location":"developer/classes/Client/#clientcreateragdoll","title":"sv_Client:createRagdoll","text":"<p>Creates a ragdoll copy of the player at their current position. Parameters: boolean freeze <code>optional. default</code>: <code>false</code>  Whether to freeze ragdoll physics</p> <p>Returns: entity The created ragdoll entity</p>"},{"location":"developer/classes/Client/#clientsetragdolled","title":"sv_Client:setRagdolled","text":"<p>Ragdolls or un-ragdolls the player.  Handles weapon storing/restoring, positioning, and state. Parameters: boolean state  True to ragdoll, false to unragdoll</p> <p>number time <code>optional</code>  Duration in seconds to stay ragdolled</p> <p>number getUpGrace <code>optional</code>  Grace period before reactivating player</p>"},{"location":"developer/classes/Inventory/","title":"Inventory","text":"<p>Base inventory class.  The inventory object stores items, typically in a grid via the GridInv plugin. Alternatively, a simple inventory, without a grid system, is available with the SimpleInv plugin. Typically, each Character has their own inventory, however an inventory can also be tied to a world object/prop (such as with the storage plugin), or an item (such as bags).</p>"},{"location":"developer/classes/Inventory/#methods","title":"Methods","text":"Inventory:show (parent) Inventory:addItem (item) Inventory:add (item) Inventory:syncItemAdded (item) Inventory:initializeStorage (initialData) Inventory:restoreFromStorage (id) Inventory:removeItem (itemID, preserveItem) Inventory:setData (key, value) Inventory:canAccess (action, context) Inventory:addAccessRule (rule, priority) Inventory:removeAccessRule (rule) Inventory:getRecipients () Inventory:onInstanced () Inventory:onLoaded () Inventory:loadItems () Inventory:onItemsLoaded (items) Inventory:instance (initialData) Inventory:syncData (key, recipients) Inventory:sync (recipients) Inventory:delete () Inventory:destroy () Inventory:getData (key, default) Inventory:extend (className) Inventory:configure (config) Inventory:addDataProxy (key, onChange) Inventory:register (typeID) Inventory:new () Inventory:getType () Inventory:onDataChanged (key, oldValue, newValue) Inventory:getItems () Inventory:getItemsOfType (itemType) Inventory:getFirstItemOfType (itemType) Inventory:hasItem (itemType) Inventory:getItemCount (itemType) Inventory:getID ()"},{"location":"developer/classes/Inventory/#inventoryshow","title":"cl_Inventory:show","text":"<p>Displays the inventory in a UI panel.  Delegates to the global <code>nut.inventory.show</code> function. Parameters: Panel parent  Optional parent panel to attach the inventory UI to</p> <p>Returns: panel The created inventory panel</p> <p>See also: <ul> <li>nut.inventory.show</li> </ul></p>"},{"location":"developer/classes/Inventory/#inventoryadditem","title":"sv_Inventory:addItem","text":"<p>Given an item type string, creates an instance of that item type  and adds it to this inventory.  A promise is returned containing  the newly created item after it has been added to the inventory. Parameters: Item item  The item to add</p> <p>Returns: inventory The inventory instance</p>"},{"location":"developer/classes/Inventory/#inventoryadd","title":"sv_Inventory:add","text":"<p>Sample implementation of Inventory:add - delegates to addItem Parameters: Item item  The item to add</p> <p>Returns: inventory The inventory instance</p> <p>See also: <ul> <li>addItem</li> </ul></p>"},{"location":"developer/classes/Inventory/#inventorysyncitemadded","title":"sv_Inventory:syncItemAdded","text":"<p>Syncs a single added item with clients. Parameters: Item item  The item to sync</p>"},{"location":"developer/classes/Inventory/#inventoryinitializestorage","title":"sv_Inventory:initializeStorage","text":"<p>Called to handle the logic for creating the data storage for this inventory.  Returns a promise that is resolved after the storing is done. Parameters: table initialData  Table of keys and values to persist</p> <p>Returns: number Promise that resolves to the inventory ID</p>"},{"location":"developer/classes/Inventory/#inventoryrestorefromstorage","title":"sv_Inventory:restoreFromStorage","text":"<p>Called when some inventory with a certain ID needs to be loaded.  If this type is responsible for loading that inventory ID in particular,  then a promise that resolves to an inventory should be returned.  This allows for custom data storage of inventories. Parameters: integer id  The inventory ID to restore</p>"},{"location":"developer/classes/Inventory/#inventoryremoveitem","title":"sv_Inventory:removeItem","text":"<p>Removes an item corresponding to the given item ID if it is in this  inventory.  If the item belongs to this inventory, it is then deleted.  A promise is returned which is resolved after removal from this.  Deletes the item or clears its association based on <code>preserveItem</code>. Parameters: integer itemID  The ID of the item to remove</p> <p>boolean preserveItem <code>optional. default</code>: <code>false</code>  Whether to keep the item in the DB</p> <p>Returns: promise Promise resolved when removal completes</p>"},{"location":"developer/classes/Inventory/#inventorysetdata","title":"sv_Inventory:setData","text":"<p>Stores arbitrary data that can later be looked up using the given key. Parameters: string key  Metadata key</p> <p>vararg value  Value to store</p> <p>Returns: inventory The inventory instance</p>"},{"location":"developer/classes/Inventory/#inventorycanaccess","title":"sv_Inventory:canAccess","text":"<p>Whether or not a client can interact with this inventory.  Iterates through registered access rules. Parameters: string action  The type of access</p> <p>table context  Optional context (e.g. player)</p> <p>Returns: bool Whether access is allowed</p> <p>string Reason if denied</p>"},{"location":"developer/classes/Inventory/#inventoryaddaccessrule","title":"sv_Inventory:addAccessRule","text":"<p>Changes the canAccess method to also return the result of the rule  where the rule of a function of (inventory, player, action) -&gt; boolean. Parameters: function rule  Access rule function (inventory, action, context)</p> <p>integer priority <code>optional</code>  Insert position</p> <p>Returns: inventory The inventory instance</p>"},{"location":"developer/classes/Inventory/#inventoryremoveaccessrule","title":"sv_Inventory:removeAccessRule","text":"<p>Removes the first instance of a specific access rule from the inventory. Parameters: function rule  The rule function to remove</p> <p>Returns: inventory The inventory instance</p>"},{"location":"developer/classes/Inventory/#inventorygetrecipients","title":"sv_Inventory:getRecipients","text":"<p>Returns a list of players who can interact with this inventory. Returns: table List of players</p>"},{"location":"developer/classes/Inventory/#inventoryoninstanced","title":"sv_Inventory:onInstanced","text":"<p>Called after this inventory has first been created and loaded.</p>"},{"location":"developer/classes/Inventory/#inventoryonloaded","title":"sv_Inventory:onLoaded","text":"<p>Called after this inventory has first been loaded, not including right  after it has been created.</p>"},{"location":"developer/classes/Inventory/#inventoryloaditems","title":"sv_Inventory:loadItems","text":"<p>Loads the items contained in this inventory. Returns: table Mapping of item IDs to item objects</p>"},{"location":"developer/classes/Inventory/#inventoryonitemsloaded","title":"sv_Inventory:onItemsLoaded","text":"<p>Called after items have been loaded into the inventory. Parameters: table items  The loaded items</p>"},{"location":"developer/classes/Inventory/#inventoryinstance","title":"sv_Inventory:instance","text":"<p>Creates an inventory instance via the global inventory system. Parameters: table initialData  Table of initialization parameters</p> <p>Returns: inventory The new inventory instance</p> <p>See also: <ul> <li>nut.inventory.instance</li> </ul></p>"},{"location":"developer/classes/Inventory/#inventorysyncdata","title":"sv_Inventory:syncData","text":"<p>Sends a key-value pair to all clients who can access this inventory. Parameters: string key  The key to replicate</p> <p>Client recipients <code>optional</code>  Override recipients</p>"},{"location":"developer/classes/Inventory/#inventorysync","title":"sv_Inventory:sync","text":"<p>Sends the full inventory and all contained items information to clients. Parameters: Client recipients <code>optional</code>  Override recipients</p>"},{"location":"developer/classes/Inventory/#inventorydelete","title":"sv_Inventory:delete","text":"<p>Deletes the inventory using the global deletion handler.</p> <p>See also: <ul> <li>nut.inventory.deleteByID</li> </ul></p>"},{"location":"developer/classes/Inventory/#inventorydestroy","title":"sv_Inventory:destroy","text":"<p>Destroys all items and removes the inventory instance.</p>"},{"location":"developer/classes/Inventory/#inventorygetdata","title":"sh_Inventory:getData","text":"<p>Returns the value of the stored key if it exists, the default otherwise.  If no default is given, then nil is returned. Parameters: integer key  The key to look up data  with</p> <p>vararg default <code>optional. default</code>: <code>nil</code>  The value that should be returned if no such data was found. By default this is nil</p> <p>Returns: A value corresponding to the key</p>"},{"location":"developer/classes/Inventory/#inventoryextend","title":"sh_Inventory:extend","text":"<p>Creates an inventory object whose base class is the callee.  Use this to create subclasses of a specific inventory type.  A starting point is to extend the nut.Inventory class. Parameters: string className  the className of the base class to extend</p>"},{"location":"developer/classes/Inventory/#inventoryconfigure","title":"sh_Inventory:configure","text":"<p>Called when the inventory can first be configured.  You can call edit the inventory configuration in here. Parameters: vararg config  A reference to the inventory configuration table</p>"},{"location":"developer/classes/Inventory/#inventoryadddataproxy","title":"sh_Inventory:addDataProxy","text":"<p>Adds a callback function for data changes whose key matches the given one.  This allows you to add additional behavior when data is changed. Note that  this only runs if the default behavior for Inventory:onDataChanged has  not been modified. Parameters: string key  A string containing the data key that needs to be changed for the callback to run</p> <p>function onChange  A function with oldValue and newValue as parameters that is called when the data is changed</p>"},{"location":"developer/classes/Inventory/#inventoryregister","title":"sh_Inventory:register","text":"<p>Sets the type ID for this inventory class and registers it as a valid type.  This basically sets up configurations for this inventory and registers  the type. Parameters: string typeID  A string containing a key to later access the type</p> <p>See also: <ul> <li>nut.inventory.newType</li> </ul></p>"},{"location":"developer/classes/Inventory/#inventorynew","title":"sh_Inventory:new","text":"<p>Creates an instance of this inventory type. Returns: An inventory instance</p> <p>See also: <ul> <li>nut.inventory.new</li> </ul></p>"},{"location":"developer/classes/Inventory/#inventorygettype","title":"sh_Inventory:getType","text":"<p>Returns the inventory type of this inventory. Returns: An inventory object</p>"},{"location":"developer/classes/Inventory/#inventoryondatachanged","title":"sh_Inventory:onDataChanged","text":"<p>Called when a data value has been changed for this inventory.  You can use this to add different behaviors for certain keys changing. Parameters: vararg key  The key whose value was changed</p> <p>vararg oldValue  The previous value corresponding to the key</p> <p>vararg newValue  The value the key is being set to</p>"},{"location":"developer/classes/Inventory/#inventorygetitems","title":"sh_Inventory:getItems","text":"<p>Returns a list of all the items in this inventory Returns: A table containing items</p>"},{"location":"developer/classes/Inventory/#inventorygetitemsoftype","title":"sh_Inventory:getItemsOfType","text":"<p>Returns a list of items in this inventory with matching item type. Parameters: string itemType  A string containing the desired type of item</p> <p>Returns: table A table containing items whose type matches</p>"},{"location":"developer/classes/Inventory/#inventorygetfirstitemoftype","title":"sh_Inventory:getFirstItemOfType","text":"<p>Returns an item in this inventory of a specific type, or nil if not found. Parameters: string itemType  A string containing the desired type of item</p> <p>Returns: An item instance if one was found, nil otherwise.</p>"},{"location":"developer/classes/Inventory/#inventoryhasitem","title":"sh_Inventory:hasItem","text":"<p>Returns whether or not this inventory contains at least one item of the given type. Parameters: string itemType  The desired type of item</p> <p>Returns: bool True if there is such an item, false otherwise</p>"},{"location":"developer/classes/Inventory/#inventorygetitemcount","title":"sh_Inventory:getItemCount","text":"<p>Returns the amount of items of a given type are in the inventory. Parameters: string itemType  The desired type of item</p> <p>Returns: int the number of relevant items in the inventory</p>"},{"location":"developer/classes/Inventory/#inventorygetid","title":"sh_Inventory:getID","text":"<p>Returns the inventory's ID. Returns: number Inventory ID</p>"},{"location":"developer/classes/Inventory/#metamethods","title":"Metamethods","text":"Inventory:__tostring () Inventory:__eq (other)"},{"location":"developer/classes/Inventory/#inventory__tostring","title":"sh_Inventory:__tostring","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>A string representation of this inventory. Returns: string A string containing a nice representation of this inventory</p>"},{"location":"developer/classes/Inventory/#inventory__eq","title":"sh_Inventory:__eq","text":"<p>Check whether the inventory is the same as another Parameters: inv other  The other inventory</p> <p>Returns: bool True if equal, otherwise False</p>"},{"location":"developer/classes/entity/","title":"Entity","text":"<p>Base class for entities.</p> <p>Entities are all interactible objects on the server. Learn more here</p>"},{"location":"developer/classes/entity/#networking-methods","title":"Networking Methods","text":"Entity:sendNetVar (key, receiver) Entity:clearNetVars (receiver) Entity:setNetVar (key, value, receiver) Entity:getNetVar (key, default)"},{"location":"developer/classes/entity/#entitysendnetvar","title":"sv_Entity:sendNetVar","text":"<p>Sends a network variable from an entity to a specific receiver. Parameters: string key  Name of the variable</p> <p>Client receiver  Client or list of clients to receive the data</p>"},{"location":"developer/classes/entity/#entityclearnetvars","title":"sv_Entity:clearNetVars","text":"<p>Clears all network variables associated with this entity.  Notifies the client(s) to remove them. Parameters: Client receiver  Client or list of clients to receive deletion info</p>"},{"location":"developer/classes/entity/#entitysetnetvar","title":"sv_Entity:setNetVar","text":"<p>Sets a network variable on the entity and notifies the receiver. Parameters: string key  Variable name</p> <p>vararg value  Variable value</p> <p>Client receiver <code>optional</code>  Client or list of clients to receive update</p>"},{"location":"developer/classes/entity/#entitygetnetvar","title":"sh_Entity:getNetVar","text":"<p>Retrieves a networked variable from the entity.  The clientside version of the function can only return data that was previously networked to the client.  Returns a default value if the variable is not set. Parameters: string key  The variable name</p> <p>vararg default <code>optional</code>  A fallback value to return if the key is not present</p> <p>Returns: vararg The stored value or the default</p>"},{"location":"developer/classes/entity/#entity-door-utilities","title":"Entity Door Utilities","text":"<p>Provides utility methods for door detection and logic.</p> Entity:isDoor () Entity:getDoorPartner () Entity:isLocked () Entity:getBlocker () Entity:blastDoor (velocity, lifeTime, ignorePartner)"},{"location":"developer/classes/entity/#entityisdoor","title":"sh_Entity:isDoor","text":"<p>Checks if an entity is a door by comparing its class. Returns: bool True if the entity is a door</p>"},{"location":"developer/classes/entity/#entitygetdoorpartner","title":"sh_Entity:getDoorPartner","text":"<p>Returns the door's partner entity (slave or parent). Returns: entity The partner door entity if found</p> <p>Or nil If the door has no partner</p>"},{"location":"developer/classes/entity/#entityislocked","title":"sh_Entity:isLocked","text":"<p>Checks if the door or vehicle is locked.  Reads from the entity's internal save table. Returns: bool <code>True</code> if the entity is locked, <code>false</code> otherwise</p> <p>Or nil If no lock data is available</p>"},{"location":"developer/classes/entity/#entitygetblocker","title":"sh_Entity:getBlocker","text":"<p>Returns the entity that is blocking the door's sequence.  Typically another entity preventing the door from moving. Returns: entity Blocker entity if present</p> <p>Or nil If no blocker is present</p>"},{"location":"developer/classes/entity/#entityblastdoor","title":"sv_Entity:blastDoor","text":"<p>Simulates the door being blasted open by replacing it with a physics dummy.  The original door is hidden and later restored. Optionally applies to a partner door. Parameters: Vector velocity <code>optional</code>  Velocity applied to the dummy object</p> <p>number lifeTime <code>optional. default</code>: <code>120</code>  Duration in seconds before restoring the door</p> <p>boolean ignorePartner <code>optional. default</code>: <code>false</code>  If true, skips blasting the partner door</p> <p>Returns: entity The created dummy physics entity replacing the door</p>"},{"location":"developer/classes/entity/#entity-chair-utilities","title":"Entity Chair Utilities","text":"<p>Provides helper functions to determine whether an entity is considered a chair.</p> Entity:isChair ()"},{"location":"developer/classes/entity/#entityischair","title":"sh_Entity:isChair","text":"<p>Whether or not a vehicle is a chair by checking its model with the chair list. Returns: bool True if the entity is a chair</p>"},{"location":"developer/classes/item/","title":"Item","text":"<p>Item Class.</p> <p>Represents an instance of an item in NutScript, including persistence, networking, inventory management, and interaction logic.</p>"},{"location":"developer/classes/item/#methods","title":"Methods","text":"Item:removeFromInventory (preserveItem) Item:delete () Item:remove () Item:destroy () Item:onDisposed () Item:getEntity () Item:spawn (position, angles) Item:transfer (newInventory, bBypass) Item:onInstanced (id) Item:onSync (recipient) Item:onRemoved () Item:onRestored (inventory) Item:sync (recipient) Item:setData (key, value, receivers, noSave, noCheckEntity) Item:addQuantity (quantity, receivers, noCheckEntity) Item:setQuantity (quantity, receivers, noCheckEntity) Item:interact (action, client, entity, data) Item:getQuantity () Item:getID () Item:getName () Item:getDesc () Item:getModel () Item:getSkin () Item:getPrice () Item:calcPrice (price) Item:call (method, client, entity, ...) Item:getOwner () Item:getData (key, default) Item:hook (name, func) Item:postHook (name, func) Item:onRegistered ()"},{"location":"developer/classes/item/#itemremovefrominventory","title":"sv_Item:removeFromInventory","text":"<p>Removes the item from the inventory it is in and then itself Parameters: boolean preserveItem <code>optional. default</code>: <code>false</code>  Whether to keep the item in memory/database</p> <p>Returns: promise Promise that resolves when the item is removed</p>"},{"location":"developer/classes/item/#itemdelete","title":"sv_Item:delete","text":"<p>Deletes the item from memory and database. Returns: promise Resolves when the item is deleted</p>"},{"location":"developer/classes/item/#itemremove","title":"sv_Item:remove","text":"<p>Permanently deletes this item instance and from the inventory it is in. Returns: promise Resolves when the item is fully removed</p>"},{"location":"developer/classes/item/#itemdestroy","title":"sv_Item:destroy","text":"<p>Deletes the in-memory data for this item</p>"},{"location":"developer/classes/item/#itemondisposed","title":"sv_Item:onDisposed","text":"<p>Called when the item data has been cleaned up from memory.</p>"},{"location":"developer/classes/item/#itemgetentity","title":"sv_Item:getEntity","text":"<p>Returns the entity representing this item, if one exists. Returns: entity or nil The entity representing the item</p>"},{"location":"developer/classes/item/#itemspawn","title":"sv_Item:spawn","text":"<p>Spawn an item entity based off the item table. Parameters: vararg position  A Vector position or a player to derive drop position from</p> <p>Angle angles <code>optional</code>  Orientation of the item</p> <p>Returns: entity The spawned entity</p>"},{"location":"developer/classes/item/#itemtransfer","title":"sv_Item:transfer","text":"<p>Transfers the item to a different inventory. Parameters: Inventory newInventory  The target inventory</p> <p>boolean bBypass <code>optional. default</code>: <code>false</code>  Whether to bypass access rules</p> <p>Returns: bool True if transfer succeeded or was queued</p>"},{"location":"developer/classes/item/#itemoninstanced","title":"sv_Item:onInstanced","text":"<p>Called when an instance of this item has been created. Parameters: integer id  The item ID</p>"},{"location":"developer/classes/item/#itemonsync","title":"sv_Item:onSync","text":"<p>Called when data for this item should be replicated to the recipient. Parameters: Client recipient  The player to sync to</p>"},{"location":"developer/classes/item/#itemonremoved","title":"sv_Item:onRemoved","text":"<p>Called when this item has been deleted permanently.</p>"},{"location":"developer/classes/item/#itemonrestored","title":"sv_Item:onRestored","text":"<p>Called when this item has been loaded from the database. Parameters: Inventory inventory <code>optional</code>  The inventory the item belongs to</p>"},{"location":"developer/classes/item/#itemsync","title":"sv_Item:sync","text":"<p>Syncs this item\u2019s data to a recipient. Parameters: Client recipient <code>optional</code>  The recipient to send data to (nil = broadcast to all clients)</p>"},{"location":"developer/classes/item/#itemsetdata","title":"sv_Item:setData","text":"<p>Sets data on this item and optionally syncs it. Parameters: string key  The data key</p> <p>vararg value  The data value</p> <p>Client receivers <code>optional</code>  Receiver(s) to send update to</p> <p>boolean noSave <code>optional. default</code>: <code>false</code>  Whether to skip saving to database</p> <p>boolean noCheckEntity <code>optional. default</code>: <code>false</code>  Whether to skip syncing with entity</p>"},{"location":"developer/classes/item/#itemaddquantity","title":"sv_Item:addQuantity","text":"<p>Adds quantity to the item. Parameters: integer quantity  The amount to add</p> <p>Client receivers <code>optional</code>  Receiver(s) to notify</p> <p>boolean noCheckEntity <code>optional. default</code>: <code>false</code>  Whether to skip syncing with entity</p>"},{"location":"developer/classes/item/#itemsetquantity","title":"sv_Item:setQuantity","text":"<p>Sets the quantity of the item. Parameters: integer quantity  The new quantity value</p> <p>Client receivers <code>optional</code>  Receiver(s) to notify</p> <p>boolean noCheckEntity <code>optional. default</code>: <code>false</code>  Whether to skip syncing with entity</p>"},{"location":"developer/classes/item/#iteminteract","title":"sv_Item:interact","text":"<p>Performs an interaction on the item (e.g., use, drop).  Handles all logic and hooks associated with the action. Parameters: string action  The action name</p> <p>Client client  The player performing the action</p> <p>Entity entity <code>optional</code>  The associated entity if any</p> <p>table data <code>optional</code>  Optional data/context</p> <p>Returns: bool Whether the interaction succeeded</p>"},{"location":"developer/classes/item/#itemgetquantity","title":"sh_Item:getQuantity","text":"<p>Gets the quantity of the item.  If item ID is 0, returns <code>maxQuantity</code> instead. Returns: int The quantity</p>"},{"location":"developer/classes/item/#itemgetid","title":"sh_Item:getID","text":"<p>Gets the unique item ID. Returns: int Item ID</p>"},{"location":"developer/classes/item/#itemgetname","title":"sh_Item:getName","text":"<p>Gets the item's display name.  Localized on client. Returns: string Name of the item</p>"},{"location":"developer/classes/item/#itemgetdesc","title":"sh_Item:getDesc","text":"<p>Gets the item's description.  Localized on client. Returns: string Description of the item</p>"},{"location":"developer/classes/item/#itemgetmodel","title":"sh_Item:getModel","text":"<p>Gets the item's model path. Returns: string Model path</p>"},{"location":"developer/classes/item/#itemgetskin","title":"sh_Item:getSkin","text":"<p>Gets the item's skin index. Returns: int Skin index</p>"},{"location":"developer/classes/item/#itemgetprice","title":"sh_Item:getPrice","text":"<p>Gets the item's price.  Used in, for example, vendors.  May be calculated dynamically using <code>calcPrice</code>. Returns: number Price value</p> <p>See also: <ul> <li>calcPrice</li> </ul></p>"},{"location":"developer/classes/item/#itemcalcprice","title":"sh_Item:calcPrice","text":"<p>Dynamically calculate the price of the item. Parameters: number price  The Item's default price</p> <p>Returns: number Calculated price</p> <p>See also: <ul> <li>getPrice</li> </ul></p>"},{"location":"developer/classes/item/#itemcall","title":"sh_Item:call","text":"<p>Calls a method on the item with client/entity context. Parameters: string method  Name of the method to call</p> <p>Client client <code>optional</code>  The client context</p> <p>Entity entity <code>optional</code>  The entity context</p> <p>vararg ...  Arguments to pass to the method</p>"},{"location":"developer/classes/item/#itemgetowner","title":"sh_Item:getOwner","text":"<p>Gets the player who owns this item.  Scans known inventories and recipients. Returns: client The owner</p> <p>Or nil If item has no owner</p>"},{"location":"developer/classes/item/#itemgetdata","title":"sh_Item:getData","text":"<p>Gets stored data from the item.  If key is <code>true</code>, returns the entire data table. Parameters: vararg key  Data key (string) or true to return all</p> <p>vararg default <code>optional</code>  Default value if key not found</p> <p>Returns: any Stored value or default</p>"},{"location":"developer/classes/item/#itemhook","title":"sh_Item:hook","text":"<p>Attaches a hook function to this item. Parameters: string name  Hook name</p> <p>function func  Hook function</p>"},{"location":"developer/classes/item/#itemposthook","title":"sh_Item:postHook","text":"<p>Attaches a post-execution hook to this item. Parameters: string name  Hook name</p> <p>function func  Hook function</p>"},{"location":"developer/classes/item/#itemonregistered","title":"sh_Item:onRegistered","text":"<p>Called after NutScript has stored this item into the list of valid items.</p>"},{"location":"developer/classes/item/#metamethods","title":"Metamethods","text":"Item:__eq (other) Item:__tostring ()"},{"location":"developer/classes/item/#item__eq","title":"sh_Item:__eq","text":"<p>Checks if this item is equal to another item. Parameters: item other  The other item</p> <p>Returns: bool Whether the two items have the same ID</p>"},{"location":"developer/classes/item/#item__tostring","title":"sh_Item:__tostring","text":"<p>Converts the item to a string representation. Returns: string The item as string identifier</p>"},{"location":"developer/derma/Derma/","title":"Derma","text":"List of Constructs Globals Name Summary Globals Global functions defined in NutScript. Libraries Name Summary nut.config Library for creating and setting config options within the framework. nut.char Character Management Library. nut.menu Library functions for nut.menu. nut.playerInteract Base library for the player interaction menu library. nut.item Item Module. nut.anim Animation Library. nut.chat Extended Chatbox Module. nut.class Class System module. nut.command Chat Command module. nut.currency Currency System. nut.date Date/Time module. nut.faction Faction System. nut.flag Flag System. nut.inventory Inventory System. nut.lang Language Module. nut.plugin Plugin Module. nut.db Database Module. nut.util Utility module. nut.data Data Persistence Utility. Classes Name Summary character Base character class. client Base class for players. entity Base class for entities. inventory Base inventory class. item Item Class. Hooks Name Summary PLUGIN Plugin Hook Documentation. Plugins Name Summary Area Designate areas within a map. Attributes Attributes that define various RPG stats of a character."},{"location":"developer/globals/Globals/","title":"Globals","text":"<p>Global functions defined in NutScript.</p> <p>Some functions exist in the global realm (_G) instead of being part of a class or module.</p>"},{"location":"developer/globals/Globals/#networking-global-functions","title":"Networking global functions","text":"setNetVar (key, value, receiver) getNetVar (key, default)"},{"location":"developer/globals/Globals/#setnetvar","title":"sv_setNetVar","text":"<p>Sets a global network variable.  Broadcasts the variable to specified receivers. Parameters: string key  Name of the variable</p> <p>vararg value  Value to assign</p> <p>Client receiver <code>optional</code>  Client or list of clients to receive the update</p>"},{"location":"developer/globals/Globals/#getnetvar","title":"sh_getNetVar","text":"<p>Gets a global network variable.  Returns default value if key does not exist.  The clientside version of the function can only return data that was previously networked to the client. Parameters: string key  Variable name</p> <p>vararg default <code>optional</code>  Default fallback value</p> <p>Returns: The global value or the default</p>"},{"location":"developer/globals/Globals/#language-functions","title":"Language functions","text":"L (key, client, ...) L2 (key, client, ...) L3 (key, langKey, ...) L (key, ...) L2 (key, ...) LangFileStruct"},{"location":"developer/globals/Globals/#l","title":"sv_L","text":"<p>Gets localized string with formatting (server version) Parameters: string key  Language string key</p> <p>Client client  Target player for language preference</p> <p>vararg ...  Format arguments</p> <p>Returns: string Formatted localized string</p> <p>Or string Original key if translation missing</p> <p>Usage: <ul> <pre><code>L(\"welcomeMessage\", player, player:Name())\n</code></pre> </ul></p>"},{"location":"developer/globals/Globals/#l2","title":"sv_L2","text":"<p>Gets localized string only if exists (server version) Parameters: string key  Language string key</p> <p>Client client  Target player for language preference</p> <p>vararg ...  Format arguments</p> <p>Returns: string Formatted string if translation exists</p> <p>Or nil If no translation found</p>"},{"location":"developer/globals/Globals/#l3","title":"sv_L3","text":"<p>Gets localized string with explicit language (server version) Parameters: string key  Language string key</p> <p>string langKey  Specific language to use</p> <p>vararg ...  Format arguments</p> <p>Returns: string Formatted localized string</p> <p>Or string Original key if translation missing</p>"},{"location":"developer/globals/Globals/#l","title":"cl_L","text":"<p>Gets localized string with formatting (client version) Parameters: string key  Language string key</p> <p>vararg ...  Format arguments</p> <p>Returns: string Formatted localized string</p> <p>Or string Original key if translation missing</p> <p>Usage: <ul> <pre><code>L(\"welcomeMessage\", LocalPlayer():Name())\n</code></pre> </ul></p>"},{"location":"developer/globals/Globals/#l2","title":"cl_L2","text":"<p>Gets localized string only if exists (client version) Parameters: string key  Language string key</p> <p>vararg ...  Format arguments</p> <p>Returns: string Formatted string if translation exists</p> <p>Or nil If no translation found</p>"},{"location":"developer/globals/Globals/#langfilestruct","title":"sh_LangFileStruct","text":"<p>Language File Structure:  Each language file should return: Fields: vararg NAME  Display name of the language</p> <p>vararg LANGUAGE  Table of key-value string pairs</p> <p>Usage: <ul> <pre><code>LANGUAGE = {\n    welcome = \"Welcome, %s!\",\n    goodbye = \"Goodbye!\"\n}\nNAME = \"English\"\n</code></pre> </ul></p>"},{"location":"developer/hooks/Plugin/","title":"PLUGIN","text":"<p>Plugin Hook Documentation.</p> <p>Base hooks for plugins. Hooks are functions that can have code appended to, and are triggered at specific events. NutScript allows you to add hooks via PLUGIN, rather than hook.Add. See: https://wiki.facepunch.com/gmod/Hook_Library_Usage and Why use PLUGIN?</p>"},{"location":"developer/hooks/Plugin/#character-related-hooks","title":"Character-related hooks","text":"PLUGIN:CharacterLoaded (id) PLUGIN:CharacterPreSave (character) PLUGIN:CanPlayerUseChar (client, char) PLUGIN:GetDefaultCharDesc (client, faction) PLUGIN:GetDefaultCharName (client, faction) PLUGIN:CheckFactionLimitReached (faction, character, client) PLUGIN:PlayerLoadedChar (client, character, lastChar) PLUGIN:PrePlayerLoadedChar (client, character, lastChar) PLUGIN:OnCharVarChanged (char, varName, oldVar, newVar)"},{"location":"developer/hooks/Plugin/#plugincharacterloaded","title":"sv_PLUGIN:CharacterLoaded","text":"<p>Called when a character is fully loaded. Parameters: integer id  The character ID that was loaded</p>"},{"location":"developer/hooks/Plugin/#plugincharacterpresave","title":"sv_PLUGIN:CharacterPreSave","text":"<p>Called right before a character is saved. Parameters: Character character  The character being saved</p>"},{"location":"developer/hooks/Plugin/#plugincanplayerusechar","title":"sh_PLUGIN:CanPlayerUseChar","text":"<p>Checks whether a player can play as a specific character.  Return false and a string to prevent a character from being selected. Parameters: Client client  The player trying to load a character</p> <p>Character char  The character being loaded</p> <p>Returns: bool</p> <p>string Reason the character can't be loaded</p>"},{"location":"developer/hooks/Plugin/#plugingetdefaultchardesc","title":"sh_PLUGIN:GetDefaultCharDesc","text":"<p>Returns the default character description used during creation. Parameters: Client client  The player creating the character</p> <p>integer faction  The faction index of the character</p>"},{"location":"developer/hooks/Plugin/#plugingetdefaultcharname","title":"sh_PLUGIN:GetDefaultCharName","text":"<p>Returns the default character name used during creation. Parameters: Client client  The player creating the character</p> <p>integer faction  The faction index of the character</p>"},{"location":"developer/hooks/Plugin/#plugincheckfactionlimitreached","title":"sh_PLUGIN:CheckFactionLimitReached","text":"<p>Whether or not more players are allowed to load a character of a specific faction. Parameters: faction faction  Faction metadata</p> <p>Character character  The character trying to join</p> <p>Client client  The player trying to join</p> <p>Returns: bool</p>"},{"location":"developer/hooks/Plugin/#pluginplayerloadedchar","title":"sv_PLUGIN:PlayerLoadedChar","text":"<p>Runs after a player loads a character. Parameters: Client client  The player Entity</p> <p>Character character  The new character</p> <p>Character lastChar [opt] Previous character</p>"},{"location":"developer/hooks/Plugin/#pluginpreplayerloadedchar","title":"sv_PLUGIN:PrePlayerLoadedChar","text":"<p>Runs before a player loads a character. Parameters: Client client  The player Entity</p> <p>Character character  The new character</p> <p>Character lastChar [opt] Previous character</p>"},{"location":"developer/hooks/Plugin/#pluginoncharvarchanged","title":"sh_PLUGIN:OnCharVarChanged","text":"<p>Triggers whenever a character's var is changed. Parameters: Character char  The character affected</p> <p>string varName  Name of the variable</p> <p>vararg oldVar  Old value</p> <p>vararg newVar  New value</p>"},{"location":"developer/hooks/Plugin/#inventory-management-hooks","title":"Inventory management hooks","text":"PLUGIN:CanItemBeTransfered (itemObject, curInv, inventory) PLUGIN:CanPlayerDropItem (client, item) PLUGIN:CanPlayerInteractItem (client, action, item) PLUGIN:CanPlayerTakeItem (client, item) PLUGIN:CreateDefaultInventory (character) PLUGIN:CreateInventoryPanel (inventory, parent) PLUGIN:GetDefaultInventoryType (character) PLUGIN:OnInventoryCreated (inventory) PLUGIN:OnInventoryDeleted (id) PLUGIN:OnInventoryLoaded (inventory)"},{"location":"developer/hooks/Plugin/#plugincanitembetransfered","title":"sh_PLUGIN:CanItemBeTransfered","text":"<p>Check whether an item can be transferred between inventories. Parameters: Item itemObject  The item</p> <p>Inventory curInv  Current inventory</p> <p>Inventory inventory  Target inventory</p> <p>Returns: bool Return false to block transfer</p>"},{"location":"developer/hooks/Plugin/#plugincanplayerdropitem","title":"sv_PLUGIN:CanPlayerDropItem","text":"<p>Check if a player can drop an item. Parameters: Client client  The player</p> <p>Item item  The item</p> <p>Returns: bool Return false to block dropping</p>"},{"location":"developer/hooks/Plugin/#plugincanplayerinteractitem","title":"sv_PLUGIN:CanPlayerInteractItem","text":"<p>Check if a player can interact with an item. Parameters: Client client  The player</p> <p>string action  The action name</p> <p>Item item  The item</p> <p>Returns: bool Return false to block interaction</p>"},{"location":"developer/hooks/Plugin/#plugincanplayertakeitem","title":"sv_PLUGIN:CanPlayerTakeItem","text":"<p>Check if a player can take an item. Parameters: Client client  The player</p> <p>Item item  The item</p> <p>Returns: bool Return false to block taking</p>"},{"location":"developer/hooks/Plugin/#plugincreatedefaultinventory","title":"sv_PLUGIN:CreateDefaultInventory","text":"<p>Creates a default inventory for a character. Parameters: Character character  The character</p> <p>Returns: Inventory The created inventory</p>"},{"location":"developer/hooks/Plugin/#plugincreateinventorypanel","title":"sv_PLUGIN:CreateInventoryPanel","text":"<p>Creates the inventory UI panel. Parameters: Inventory inventory  The inventory</p> <p>Panel parent  Optional parent panel</p> <p>Returns: panel The created panel</p>"},{"location":"developer/hooks/Plugin/#plugingetdefaultinventorytype","title":"sv_PLUGIN:GetDefaultInventoryType","text":"<p>Determines the inventory type for a character. Parameters: Character character  The character</p> <p>Returns: string Inventory type ID</p>"},{"location":"developer/hooks/Plugin/#pluginoninventorycreated","title":"sh_PLUGIN:OnInventoryCreated","text":"<p>Called when an inventory is created. Parameters: inventory inventory  The new inventory</p>"},{"location":"developer/hooks/Plugin/#pluginoninventorydeleted","title":"sh_PLUGIN:OnInventoryDeleted","text":"<p>Called when an inventory is deleted. Parameters: integer id  The inventory ID</p>"},{"location":"developer/hooks/Plugin/#pluginoninventoryloaded","title":"sh_PLUGIN:OnInventoryLoaded","text":"<p>Called when an inventory is loaded. Parameters: inventory inventory  The loaded inventory</p>"},{"location":"developer/hooks/Plugin/#item-lifecycle-hooks","title":"Item lifecycle hooks","text":"PLUGIN:ItemShowEntityMenu (entity) PLUGIN:OnItemCreated (item) PLUGIN:OnItemRegistered (item)"},{"location":"developer/hooks/Plugin/#pluginitemshowentitymenu","title":"cl_PLUGIN:ItemShowEntityMenu","text":"<p>Shows the item entity menu. Parameters: vararg entity</p>"},{"location":"developer/hooks/Plugin/#pluginonitemcreated","title":"sh_PLUGIN:OnItemCreated","text":"<p>Called when an item is created. Parameters: Item item  The item</p>"},{"location":"developer/hooks/Plugin/#pluginonitemregistered","title":"sh_PLUGIN:OnItemRegistered","text":"<p>Called after an item is registered. Parameters: Item item  The item definition</p>"},{"location":"developer/hooks/Plugin/#salarymoney-hooks","title":"Salary/Money Hooks","text":"PLUGIN:CreateSalaryTimer (client) PLUGIN:GetSalaryAmount (client, faction, class) PLUGIN:GetSalaryInterval (client, faction) PLUGIN:GetSalaryLimit (client, faction, class) PLUGIN:OnPickupMoney (client, moneyEntity)"},{"location":"developer/hooks/Plugin/#plugincreatesalarytimer","title":"sv_PLUGIN:CreateSalaryTimer","text":"<p>Creates a salary timer for a player. Parameters: Client client  The player</p>"},{"location":"developer/hooks/Plugin/#plugingetsalaryamount","title":"sv_PLUGIN:GetSalaryAmount","text":"<p>Gets the salary amount for a player. Parameters: Client client  The player</p> <p>table faction  Faction table</p> <p>table class  Class table</p> <p>Returns: number Amount</p>"},{"location":"developer/hooks/Plugin/#plugingetsalaryinterval","title":"sv_PLUGIN:GetSalaryInterval","text":"<p>Gets the salary interval. Parameters: Client client  The player</p> <p>table faction  Faction table</p> <p>Returns: number Interval</p>"},{"location":"developer/hooks/Plugin/#plugingetsalarylimit","title":"sv_PLUGIN:GetSalaryLimit","text":"<p>Gets the salary cap. Parameters: Client client  The player</p> <p>table faction  Faction table</p> <p>table class  Class table</p> <p>Returns: number Limit</p>"},{"location":"developer/hooks/Plugin/#pluginonpickupmoney","title":"sh_PLUGIN:OnPickupMoney","text":"<p>Called when a player picks up money Parameters: Client client  Player picking up</p> <p>Entity moneyEntity  Money entity being picked up</p>"},{"location":"developer/hooks/Plugin/#plugin-system","title":"Plugin system","text":"PLUGIN:DoPluginIncludes (path, PLUGIN) PLUGIN:InitializedItems () PLUGIN:InitializedPlugins () PLUGIN:InitializedSchema () PLUGIN:OnMySQLOOConnected () PLUGIN:PluginLoaded (uniqueID, PLUGIN) PLUGIN:PluginShouldLoad (uniqueID) PLUGIN:RegisterPreparedStatements () PLUGIN:OnLoadTables () PLUGIN:NutScriptTablesLoaded () PLUGIN:OnWipeTables () PLUGIN:SetupDatabase ()"},{"location":"developer/hooks/Plugin/#plugindopluginincludes","title":"sh_PLUGIN:DoPluginIncludes","text":"<p>Loads extra plugin files. Parameters: string path  Directory path</p> <p>table PLUGIN  The plugin table</p>"},{"location":"developer/hooks/Plugin/#plugininitializeditems","title":"sh_PLUGIN:InitializedItems","text":"<p>Called after all items have loaded.</p>"},{"location":"developer/hooks/Plugin/#plugininitializedplugins","title":"sh_PLUGIN:InitializedPlugins","text":"<p>Called after plugins are initialized.</p>"},{"location":"developer/hooks/Plugin/#plugininitializedschema","title":"sh_PLUGIN:InitializedSchema","text":"<p>Called after schema is initialized.</p>"},{"location":"developer/hooks/Plugin/#pluginonmysqlooconnected","title":"sh_PLUGIN:OnMySQLOOConnected","text":"<p>Called when MySQLOO connects.</p>"},{"location":"developer/hooks/Plugin/#pluginpluginloaded","title":"sh_PLUGIN:PluginLoaded","text":"<p>Called after plugin is loaded. Parameters: string uniqueID  The plugin ID</p> <p>table PLUGIN  The plugin table</p>"},{"location":"developer/hooks/Plugin/#pluginpluginshouldload","title":"sh_PLUGIN:PluginShouldLoad","text":"<p>Decides whether plugin should load. Parameters: string uniqueID  Plugin ID</p> <p>Returns: bool Return false to block load</p>"},{"location":"developer/hooks/Plugin/#pluginregisterpreparedstatements","title":"sh_PLUGIN:RegisterPreparedStatements","text":"<p>Called when prepared statements should be registered.</p>"},{"location":"developer/hooks/Plugin/#pluginonloadtables","title":"sh_PLUGIN:OnLoadTables","text":"<p>Called when DB tables are loading.</p>"},{"location":"developer/hooks/Plugin/#pluginnutscripttablesloaded","title":"sh_PLUGIN:NutScriptTablesLoaded","text":"<p>Called when DB tables are loaded.</p>"},{"location":"developer/hooks/Plugin/#pluginonwipetables","title":"sv_PLUGIN:OnWipeTables","text":"<p>Called when DB tables are being wiped.</p>"},{"location":"developer/hooks/Plugin/#pluginsetupdatabase","title":"sh_PLUGIN:SetupDatabase","text":"<p>Sets up DB config.</p>"},{"location":"developer/hooks/Plugin/#client-side-ui","title":"Client-side UI","text":"PLUGIN:ScreenResolutionChanged (oldW, oldH) PLUGIN:CharacterListLoaded () PLUGIN:CreateLoadingScreen () PLUGIN:LoadNutFonts (font, genericFont, configFont) PLUGIN:NutScriptLoaded () PLUGIN:ShouldDrawEntityInfo (entity) PLUGIN:ShouldCreateLoadingScreen () PLUGIN:SetupQuickMenu (menu) PLUGIN:DrawNutModelView (panel, ent)"},{"location":"developer/hooks/Plugin/#pluginscreenresolutionchanged","title":"cl_PLUGIN:ScreenResolutionChanged","text":"<p>Called when the screen resolution changes.  This is triggered by a timer that checks resolution every second. Parameters: integer oldW  Previous screen width</p> <p>integer oldH  Previous screen height</p>"},{"location":"developer/hooks/Plugin/#plugincharacterlistloaded","title":"cl_PLUGIN:CharacterListLoaded","text":"<p>Shows character list loaded.</p>"},{"location":"developer/hooks/Plugin/#plugincreateloadingscreen","title":"cl_PLUGIN:CreateLoadingScreen","text":"<p>Creates loading screen.</p>"},{"location":"developer/hooks/Plugin/#pluginloadnutfonts","title":"cl_PLUGIN:LoadNutFonts","text":"<p>Loads fonts. Parameters: string font  Main font</p> <p>string genericFont  Secondary font</p> <p>string configFont  Config font</p>"},{"location":"developer/hooks/Plugin/#pluginnutscriptloaded","title":"cl_PLUGIN:NutScriptLoaded","text":"<p>Framework loaded.</p>"},{"location":"developer/hooks/Plugin/#pluginshoulddrawentityinfo","title":"cl_PLUGIN:ShouldDrawEntityInfo","text":"<p>Checks if info should draw. Parameters: Entity entity  The entity</p> <p>Returns: bool Should draw info</p>"},{"location":"developer/hooks/Plugin/#pluginshouldcreateloadingscreen","title":"cl_PLUGIN:ShouldCreateLoadingScreen","text":"<p>Checks if loading screen should appear.</p>"},{"location":"developer/hooks/Plugin/#pluginsetupquickmenu","title":"cl_PLUGIN:SetupQuickMenu","text":"<p>Sets up quick menu. Parameters: Derma menu  Quick menu panel</p>"},{"location":"developer/hooks/Plugin/#plugindrawnutmodelview","title":"cl_PLUGIN:DrawNutModelView","text":"<p>Draws model view in panel. Parameters: Derma panel  Model panel</p> <p>Entity ent  Entity</p>"},{"location":"developer/hooks/Plugin/#logging","title":"Logging","text":"PLUGIN:OnServerLog (client, logType, ...)"},{"location":"developer/hooks/Plugin/#pluginonserverlog","title":"sv_PLUGIN:OnServerLog","text":"<p>Server log output. Parameters: Client client  The client</p> <p>string logType  Log type</p> <p>vararg ...  Extra data</p>"},{"location":"developer/hooks/Plugin/#bot-hooks","title":"Bot hooks","text":"PLUGIN:SetupBotCharacter (client) PLUGIN:SetupBotInventory (client, character)"},{"location":"developer/hooks/Plugin/#pluginsetupbotcharacter","title":"sv_PLUGIN:SetupBotCharacter","text":"<p>Sets up bot character. Parameters: Client client  The bot</p>"},{"location":"developer/hooks/Plugin/#pluginsetupbotinventory","title":"sv_PLUGIN:SetupBotInventory","text":"<p>Sets up bot inventory. Parameters: Client client  The bot</p> <p>Character character  The bot character</p>"},{"location":"developer/hooks/Plugin/#combat-system","title":"Combat system","text":"PLUGIN:PlayerGetFistDamage (client, damage, context)"},{"location":"developer/hooks/Plugin/#pluginplayergetfistdamage","title":"sv_PLUGIN:PlayerGetFistDamage","text":"<p>Gets damage for fist SWEP. Parameters: Client client  The attacker</p> <p>integer damage  Default damage</p> <p>table context  Damage context</p>"},{"location":"developer/hooks/Plugin/#attribute-system","title":"Attribute system","text":"PLUGIN:OnCharAttribBoosted (client, character, attribID, boostID, boostAmount)"},{"location":"developer/hooks/Plugin/#pluginoncharattribboosted","title":"sh_PLUGIN:OnCharAttribBoosted","text":"<p>Called on attribute boost. Parameters: Client client  The client</p> <p>Character character  The character</p> <p>string attribID  Attribute ID</p> <p>string boostID  Boost ID</p> <p>number boostAmount  Boost value</p>"},{"location":"developer/hooks/Plugin/#fallover","title":"Fallover","text":"PLUGIN:OnCharFallover (client, ragdoll, fellover)"},{"location":"developer/hooks/Plugin/#pluginoncharfallover","title":"sh_PLUGIN:OnCharFallover","text":"<p>Called when fallover state changes. Parameters: Client client  The client</p> <p>Entity ragdoll  The ragdoll</p> <p>boolean fellover  Is ragdolled</p>"},{"location":"developer/hooks/Plugin/#class-hooks","title":"Class hooks","text":"PLUGIN:OnPlayerJoinClass (client, class, oldClass)"},{"location":"developer/hooks/Plugin/#pluginonplayerjoinclass","title":"sh_PLUGIN:OnPlayerJoinClass","text":"<p>Called when a player changes classes. Parameters: Client client  The player changing classes</p> <p>number class  New class index</p> <p>number oldClass  Previous class index</p>"},{"location":"developer/libraries/nut.anim/","title":"nut.anim","text":"<p>Animation Library.</p> <p>Provides animation mappings and utilities for different player models and states. Supports model class assignments and forced animation sequences for roleplay purposes.</p>"},{"location":"developer/libraries/nut.anim/#functions","title":"Functions","text":"nut.anim.setModelClass (model, class) nut.anim.getModelClass (model)"},{"location":"developer/libraries/nut.anim/#nut.anim.setmodelclass","title":"sh_nut.anim.setModelClass","text":"<p>Sets the animation class for a specified model.  Use this to fix models using incorrect animations or T-Posing</p> <p>This function does not transform models</p> <p><code>nut.anim.setModelClass</code> doesn't give a model animations, it translates gmod inputs meant for typical playermodels to those used by stuff like NPC models. If a model does not have animations baked into them, it won't play them. There are ways to achieve that but not base NS.</p> <p>Supported classes:</p> Class Description <code>citizen_male</code> Male Human NPC animations. Use this for models using the male HL2 Citizen model as a base <code>citizen_female</code> Female Human NPC animations. Use this for models using the female HL2 Citizen model as a base <code>metrocop</code> Metrocop animations. Use this for models using the HL2 Metrocop model as a base <code>overwatch</code> Overwatch animations. Use this for models using the HL2 Overwatch Elite model as a base <code>vort</code> Vortiguant animations. Use this for models using the HL2 Vort model as a base <code>zombie</code> Zombie animations. Use this for models using the HL2 Zombie model as a base <code>fastZombie</code> Fast Zombie animations. Use this for models using the HL2 Fast Zombie model as a base <code>player</code> Player animations. Use this for models meant to be used as player models (typically have <code>/player/</code> in their model path) <p>Parameters: string model  The model path to assign an animation class to</p> <p>string class  The animation class to assign</p>"},{"location":"developer/libraries/nut.anim/#nut.anim.getmodelclass","title":"sh_nut.anim.getModelClass","text":"<p>Gets the animation class for a specified model.  Falls back to default classes based on model name if not explicitly set. Parameters: string model  The model path to check</p> <p>Returns: string The animation class for this model</p>"},{"location":"developer/libraries/nut.char/","title":"nut.char","text":"<p>Character Management Library.</p> <p>This module provides core logic for character creation, storage, validation, and synchronization in the NutScript framework. It manages character variables, metadata, and interactions across the server and client, enabling features like whitelisting, model selection, faction assignment, and inventory linking.</p>"},{"location":"developer/libraries/nut.char/#functions","title":"Functions","text":"nut.char.create (data, callback) nut.char.restore (client, callback, noCache, id) nut.char.cleanUpForPlayer (client) nut.char.delete (id, client) nut.char.new (data, id, client, steamID) nut.char.registerVar (key, data)"},{"location":"developer/libraries/nut.char/#nut.char.create","title":"sv_nut.char.create","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Creates a new character in the database with the given data. Parameters: table data  The character data table (name, model, faction, etc.)</p> <p>function callback <code>optional</code>  Callback function triggered after creation (receives charID)</p>"},{"location":"developer/libraries/nut.char/#nut.char.restore","title":"sv_nut.char.restore","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Restores a player's characters from the database. Parameters: Client client  The player whose characters are being restored</p> <p>function callback  Function to call when restoration is complete</p> <p>boolean noCache <code>optional</code>  If true, skips caching (unused in current implementation)</p> <p>number id <code>optional</code>  Specific character ID to restore</p>"},{"location":"developer/libraries/nut.char/#nut.char.cleanupforplayer","title":"sv_nut.char.cleanUpForPlayer","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Cleans up all character data for a player when they disconnect. Parameters: Client client  The player whose character data should be cleaned up</p>"},{"location":"developer/libraries/nut.char/#nut.char.delete","title":"sv_nut.char.delete","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Deletes a character from the database and cleans up related data. Parameters: number id  The character ID to delete</p> <p>Client client <code>optional</code>  Player associated with the character</p>"},{"location":"developer/libraries/nut.char/#nut.char.new","title":"sh_nut.char.new","text":"<p>Creates a new character object with the given data and metadata. Parameters: table data  A table containing the character data.</p> <p>integer id  The ID of the character.</p> <p>Client client  The player associated with the character.</p> <p>string steamID <code>optional</code>  The SteamID of the player associated with the character.</p> <p>Returns: table The newly created character object.</p>"},{"location":"developer/libraries/nut.char/#nut.char.registervar","title":"sh_nut.char.registerVar","text":"<p>Sets up a new character variable. Parameters: string key  A Unique key for the variable</p> <p>table data  Variable Data</p>"},{"location":"developer/libraries/nut.chat/","title":"nut.chat","text":"<p>Extended Chatbox Module.</p> <p>The NutScript chatbox is a custom implementation, rather than using the default GMOD chatbox. This allows the chatbox to contain additional features, such as multiple different chat types and categories.</p>"},{"location":"developer/libraries/nut.chat/#functions","title":"Functions","text":"nut.chat.timestamp (ooc) nut.chat.register (chatType, data) nut.chat.parse (client, message, noSend) nut.chat.send (speaker, chatType, text, anonymous, receivers)"},{"location":"developer/libraries/nut.chat/#nut.chat.timestamp","title":"sh_nut.chat.timestamp","text":"<p>Returns a formatted timestamp for chat messages. Parameters: boolean ooc  Whether timestamp is for OOC chat</p> <p>Returns: string The formatted timestamp</p>"},{"location":"developer/libraries/nut.chat/#nut.chat.register","title":"sh_nut.chat.register","text":"<p>Registers a new chat type with the information provided. Parameters: string chatType  Unique identifier for the chat type</p> <p>table data  Configuration table for the chat type</p> <p>See also: <ul> <li>ChatType</li> </ul> Usage: <ul> <pre><code>nut.chat.register(\"ic\", {\n    format = \"%s says \\\"%s\\\"\",\n    radius = function() return 280 end,\n    color = Color(255, 255, 255)\n})\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.chat/#nut.chat.parse","title":"sh_nut.chat.parse","text":"<p>Parses a chat message to determine its type and processes it. Parameters: Client client  The player sending the message</p> <p>string message  The chat message content</p> <p>boolean noSend <code>optional. default</code>: <code>false</code>  Whether to skip sending the message</p> <p>Returns: string The chat type used</p> <p>string The processed message</p> <p>bool Whether the sender is anonymous</p>"},{"location":"developer/libraries/nut.chat/#nut.chat.send","title":"sv_nut.chat.send","text":"<p>Send a chat message using the specified chat type. Parameters: Client speaker  The player sending the message</p> <p>string chatType  The type of chat message</p> <p>string text  The message content</p> <p>boolean anonymous <code>optional. default</code>: <code>false</code>  Whether sender should be anonymous</p> <p>table receivers <code>optional</code>  Optional list of specific receivers</p>"},{"location":"developer/libraries/nut.chat/#tables","title":"Tables","text":"ChatType"},{"location":"developer/libraries/nut.chat/#chattype","title":"sh_ChatType","text":"<p>Configuration table for registering a new chat type Fields: vararg radius  Maximum hearing distance. If number, fixed distance from speaker in HU. Otherwise Function()</p> <p>vararg prefix  Command prefix(es) (string or table of strings)</p> <p>string format  The message format string (uses %s for name/text)</p> <p>Color color  Default color for this chat type</p> <p>string font  Custom font to use</p> <p>string filter  The chat filter category (\"ic\", \"ooc\", etc.)</p> <p>boolean deadCanChat  Whether dead players can use this chat</p> <p>boolean noSpaceAfter  If true, no space required after prefix (For instance with // \"ooc\", //text would be valid without the need to separate // from the message with a space)</p> <p>function onCanSay  Function(speaker, text) - checks if player can speak</p> <p>function onCanHear  Function(speaker, listener) - checks if listener can hear</p> <p>function onChatAdd  Function(speaker, text, anonymous) - custom display handler</p> <p>function onGetColor  Function(speaker, text) - dynamic color handler</p> <p>See also: <ul> <li>nut.chat.register</li> </ul> Usage: <ul> <pre><code>{\n    format = \"%s says \\\"%s\\\"\",\n    color = Color(255,255,255),\n    radius = 280,\n    prefix = \"/me\",\n    font = \"nutChatFontItalics\",\n    filter = \"actions\",\n    deadCanChat = true,\n    onCanSay = function(speaker, text)\n        return speaker:Alive()\n    end,\n    onGetColor = function(speaker)\n        return team.GetColor(speaker:Team())\n    end\n}\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.class/","title":"nut.class","text":"<p>Class System module.</p> <p>Manages character classes with faction restrictions, limits, and join conditions. Think of classes like classes in TF2. You have 2 \"factions\", RED and BLU, and within each class are 9 classes. All are within the same team/faction, yet have special features unique to the class.</p>"},{"location":"developer/libraries/nut.class/#functions","title":"Functions","text":"nut.class.loadFromDir (directory) nut.class.canBe (client, class) nut.class.get (identifier) nut.class.getPlayers (class)"},{"location":"developer/libraries/nut.class/#nut.class.loadfromdir","title":"sh_nut.class.loadFromDir","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Register classes from a directory. Parameters: string directory  Path to scan for class files</p>"},{"location":"developer/libraries/nut.class/#nut.class.canbe","title":"sh_nut.class.canBe","text":"<p>Determines if a player is allowed to join a specific class. Parameters: Client client  Player attempting to join</p> <p>number class  Class index to check</p> <p>Returns: bool Whether allowed to join</p> <p>string Reason if not allowed</p>"},{"location":"developer/libraries/nut.class/#nut.class.get","title":"sh_nut.class.get","text":"<p>Gets a class definition by index or ID Parameters: integer identifier  Class index</p> <p>Returns: table Class definition table</p>"},{"location":"developer/libraries/nut.class/#nut.class.getplayers","title":"sh_nut.class.getPlayers","text":"<p>Gets all players in a specific class Parameters: number class  Class index to check</p> <p>Returns: table List of player entities</p>"},{"location":"developer/libraries/nut.command/","title":"nut.command","text":"<p>Chat Command module.</p> <p>Handles registration, parsing, and execution of chat and console commands.</p>"},{"location":"developer/libraries/nut.command/#functions","title":"Functions","text":"nut.command.add (command, data) nut.command.extractArgs (text) nut.command.findFaction (client, name) nut.command.run (client, command, arguments) nut.command.parse (client, text, realCommand, arguments) nut.command.send (command, ...)"},{"location":"developer/libraries/nut.command/#nut.command.add","title":"sh_nut.command.add","text":"<p>Adds a new command to the list of commands. Parameters: string command  Command name</p> <p>table data  Command definition table</p> <p>See also: <ul> <li>CommandDef</li> </ul></p>"},{"location":"developer/libraries/nut.command/#nut.command.extractargs","title":"sh_nut.command.extractArgs","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Gets a table of arguments from a string. Parameters: string text  Input text to parse</p> <p>Returns: table Extracted arguments</p>"},{"location":"developer/libraries/nut.command/#nut.command.findfaction","title":"sv_nut.command.findFaction","text":"<p>Finds a faction based on the uniqueID, and then the name if no such uniqueID exists. Parameters: Client client  Command source</p> <p>string name  Faction name or ID</p> <p>Returns: table Faction data or nil</p>"},{"location":"developer/libraries/nut.command/#nut.command.run","title":"sv_nut.command.run","text":"<p>Forces a player to run a command. Parameters: Client client  Player running command</p> <p>string command  Command name</p> <p>table arguments  Command arguments</p>"},{"location":"developer/libraries/nut.command/#nut.command.parse","title":"sv_nut.command.parse","text":"<p>Add a function to parse a regular chat string. Parameters: Client client  Player running command</p> <p>string text  Full command text</p> <p>string realCommand <code>optional</code>  Pre-extracted command name</p> <p>table arguments <code>optional</code>  Pre-extracted arguments</p> <p>Returns: bool Whether a command was executed</p>"},{"location":"developer/libraries/nut.command/#nut.command.send","title":"cl_nut.command.send","text":"<p>Sends a command from client to server Parameters: string command  Command name</p> <p>vararg ...  Command arguments</p>"},{"location":"developer/libraries/nut.command/#tables","title":"Tables","text":"CommandDef"},{"location":"developer/libraries/nut.command/#commanddef","title":"sh_CommandDef","text":"<p>Configuration table for command definitions Fields: vararg group  String/table of allowed usergroups</p> <p>vararg alias  String/table of command aliases</p> <p>string syntax  Command usage syntax (e.g. \" [amount]\") <p>function onRun  Function(client, args) - Command execution callback</p> <p>function onCheckAccess  Function(client) - Permission check</p> <p>boolean adminOnly  Boolean shortcut for admin-only commands</p> <p>boolean superAdminOnly  Boolean shortcut for superadmin-only commands</p> <p>string realCommand  Original command name if different from registered name</p> <p>See also: <ul> <li>nut.command.add</li> </ul> Usage: <ul> <pre><code>nut.command.add(\"givecash\", {\n    syntax = \"&lt;name&gt; &lt;amount&gt;\",\n    adminOnly = true,\n    onRun = function(client, args)\n        local target = nut.command.findPlayer(client, args[1])\n        local amount = tonumber(args[2])\n        -- Command logic here\n    end\n})\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.config/","title":"nut.config","text":"<p>Library for creating and setting config options within the framework.</p> <p>Configs allow various framework settings and variables to be editted live within the game, without the need to update server files and cause an update/restart.</p>"},{"location":"developer/libraries/nut.config/#functions","title":"Functions","text":"nut.config.add (key, value, desc, callback, data, noNetworking, schemaOnly)"},{"location":"developer/libraries/nut.config/#nut.config.add","title":"sh_nut.config.add","text":"<p>Add a new config. Parameters: string key  Unique ID of the config</p> <p>vararg value  default value of the config</p> <p>string desc  Description of the config</p> <p>function callback  Function to call when the config changes</p> <p>table data  Additional settings for the config</p> <p>boolean noNetworking  Whether changes to the config should be networked to clients</p> <p>boolean schemaOnly  Whether the config should affect only the schema or NutScript globally (ie, if the server loads another schema, whether the config should apply to the other schema as well)</p> <p>Usage: <ul> <pre><code> nut.config.add(\"oocDelay\", 10, \"The delay before a player can use OOC chat again in seconds.\", nil, {\n    data = {min = 0, max = 10000},\n    category = \"chat\"\n})\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.config/#fields","title":"Fields","text":"nut.config.language"},{"location":"developer/libraries/nut.config/#nut.config.language","title":"sh_nut.config.language","text":"<p>Default framework language.  Natively supported languages can be found here.</p>"},{"location":"developer/libraries/nut.currency/","title":"nut.currency","text":"<p>Currency System.</p> <p>Handles money/currency functionality including display formatting, spawning, and character transactions.</p>"},{"location":"developer/libraries/nut.currency/#functions","title":"Functions","text":"nut.currency.set (symbol, singular, plural) nut.currency.get (amount) nut.currency.spawn (pos, amount, angle)"},{"location":"developer/libraries/nut.currency/#nut.currency.set","title":"sh_nut.currency.set","text":"<p>Sets the currency display properties Parameters: string symbol  Currency symbol (e.g. \"$\")</p> <p>string singular  Singular name (e.g. \"dollar\")</p> <p>string plural  Plural name (e.g. \"dollars\")</p>"},{"location":"developer/libraries/nut.currency/#nut.currency.get","title":"sh_nut.currency.get","text":"<p>Formats an amount into a display string Parameters: number amount  Amount to format</p> <p>Returns: string Formatted currency string</p>"},{"location":"developer/libraries/nut.currency/#nut.currency.spawn","title":"sh_nut.currency.spawn","text":"<p>Spawns a physical money entity in the world Parameters: Vector pos  Position to spawn</p> <p>number amount  Money value</p> <p>Angle angle <code>optional</code>  Spawn angle</p> <p>Returns: entity The created money entity</p>"},{"location":"developer/libraries/nut.data/","title":"nut.data","text":"<p>Data Persistence Utility.</p> <p>Handles saving, retrieving, and deleting persistent framework or schema data in the <code>nutscript/</code> folder.</p>"},{"location":"developer/libraries/nut.data/#functions","title":"Functions","text":"nut.data.set (key, value, global, ignoreMap) nut.data.get (key, default, global, ignoreMap, refresh) nut.data.delete (key, global, ignoreMap)"},{"location":"developer/libraries/nut.data/#nut.data.set","title":"sv_nut.data.set","text":"<p>Set and save data in the nutscript folder. Parameters: string key  The name of the data file</p> <p>vararg value  The value to save (must be encodable via pon)</p> <p>boolean global <code>optional. default</code>: <code>false</code>  If true, shared across all schemas</p> <p>boolean ignoreMap <code>optional. default</code>: <code>false</code>  If true, ignores map-specific folder</p> <p>Returns: string Full file path where the data was saved</p>"},{"location":"developer/libraries/nut.data/#nut.data.get","title":"sv_nut.data.get","text":"<p>Retrieves a saved value from the nutscript folder.  Optionally returns cached value unless refreshed. Parameters: string key  The data key</p> <p>vararg default  Value to return if key is not found</p> <p>boolean global <code>optional. default</code>: <code>false</code>  If true, shared across all schemas</p> <p>boolean ignoreMap <code>optional. default</code>: <code>false</code>  If true, ignores map-specific folder</p> <p>boolean refresh <code>optional. default</code>: <code>false</code>  If true, bypasses cache and reads file</p> <p>Returns: any The stored value</p> <p>Or default The fallback value if not found</p>"},{"location":"developer/libraries/nut.data/#nut.data.delete","title":"sv_nut.data.delete","text":"<p>Deletes a saved value.  Removes both the file and its cache entry. Parameters: string key  The data key</p> <p>boolean global <code>optional. default</code>: <code>false</code>  If true, shared across all schemas</p> <p>boolean ignoreMap <code>optional. default</code>: <code>false</code>  If true, ignores map-specific folder</p> <p>Returns: bool True if deleted, false if not found</p>"},{"location":"developer/libraries/nut.date/","title":"nut.date","text":"<p>Date/Time module.</p> <p>Handles date and time calculations, formatting, and synchronization between server/client.</p>"},{"location":"developer/libraries/nut.date/#functions","title":"Functions","text":"nut.date.syncClientTime (client) nut.date.get () nut.date.getFormatted (format, dateNum) nut.date.initialize () nut.date.save ()"},{"location":"developer/libraries/nut.date/#nut.date.syncclienttime","title":"sv_nut.date.syncClientTime","text":"<p>Sets currency display properties (server only) Parameters: Client client  Player to sync with</p>"},{"location":"developer/libraries/nut.date/#nut.date.get","title":"sh_nut.date.get","text":"<p>Gets current in-game timestamp.  Returns a number that represents the custom time.  The year is always the current year for compatibility, though it can be editted with nut.date.getFormatted Returns: number Unix timestamp of current in-game time</p>"},{"location":"developer/libraries/nut.date/#nut.date.getformatted","title":"sh_nut.date.getFormatted","text":"<p>Takes the time number if provided, or current time and applies a string format to it Parameters: string format  Date format string (see os.date)</p> <p>number dateNum <code>optional</code>  Timestamp to format (defaults to current time)</p> <p>Returns: string Formatted date string</p>"},{"location":"developer/libraries/nut.date/#nut.date.initialize","title":"sv_nut.date.initialize","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Checks the time difference between the old time values and current time, and updates month and day to advance in the time difference.  Creates a timer that updates the month and day values, in case the server runs continuously without restarts.</p>"},{"location":"developer/libraries/nut.date/#nut.date.save","title":"sv_nut.date.save","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Save the current actual time.  This allows the time to find the difference in elapsed time between server shutdown and startup</p>"},{"location":"developer/libraries/nut.db/","title":"nut.db","text":"<p>Database Module.</p> <p>Core system for handling all database operations in NutScript.</p>"},{"location":"developer/libraries/nut.db/#functions","title":"Functions","text":"nut.db.connect (callback, reconnect) nut.db.wipeTables (callback) nut.db.loadTables () nut.db.waitForTablesToLoad () nut.db.convertDataType (value, noEscape) nut.db.insertTable (value, callback, dbTable) nut.db.updateTable (value, callback, dbTable, condition) nut.db.select (fields, dbTable, condition, limit) nut.db.upsert (value, dbTable) nut.db.delete (dbTable, condition) nut.db.prepare (key, query, types) nut.db.preparedCall (key, callback, ...)"},{"location":"developer/libraries/nut.db/#nut.db.connect","title":"sh_nut.db.connect","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Connects to the database Parameters: function callback <code>optional</code>  Function to call after connection</p> <p>boolean reconnect <code>optional</code>  Whether this is a reconnection attempt</p>"},{"location":"developer/libraries/nut.db/#nut.db.wipetables","title":"sv_nut.db.wipeTables","text":"<p>Wipes all NutScript database tables Parameters: function callback <code>optional</code>  Function to call after wipe</p>"},{"location":"developer/libraries/nut.db/#nut.db.loadtables","title":"sh_nut.db.loadTables","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Loads/creates database tables</p>"},{"location":"developer/libraries/nut.db/#nut.db.waitfortablestoload","title":"sh_nut.db.waitForTablesToLoad","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Waits for tables to finish loading Returns: promise Promise that resolves when tables are loaded</p>"},{"location":"developer/libraries/nut.db/#nut.db.convertdatatype","title":"sh_nut.db.convertDataType","text":"<p>Converts Lua data types to SQL format Parameters: vararg value  Value to convert</p> <p>boolean noEscape <code>optional</code>  Whether to skip escaping</p> <p>Returns: string SQL-formatted value</p>"},{"location":"developer/libraries/nut.db/#nut.db.inserttable","title":"sh_nut.db.insertTable","text":"<p>Inserts data into a table Parameters: table value  Key-value pairs to insert</p> <p>function callback <code>optional</code>  Query callback</p> <p>string dbTable <code>optional</code>  Table name (default \"characters\")</p>"},{"location":"developer/libraries/nut.db/#nut.db.updatetable","title":"sh_nut.db.updateTable","text":"<p>Updates data in a table Parameters: table value  Key-value pairs to update</p> <p>function callback <code>optional</code>  Query callback</p> <p>string dbTable <code>optional</code>  Table name (default \"characters\")</p> <p>string condition <code>optional</code>  WHERE condition</p>"},{"location":"developer/libraries/nut.db/#nut.db.select","title":"sh_nut.db.select","text":"<p>Selects data from a table Parameters: vararg fields  Fields to select (string  or <code>table of strings</code>)</p> <p>string dbTable <code>optional</code>  Table name (default \"characters\")</p> <p>string condition <code>optional</code>  WHERE condition</p> <p>number limit <code>optional</code>  Result limit</p> <p>Returns: promise Promise resolving to query results</p>"},{"location":"developer/libraries/nut.db/#nut.db.upsert","title":"sh_nut.db.upsert","text":"<p>Upserts (insert or update) data Parameters: table value  Key-value pairs</p> <p>string dbTable <code>optional</code>  Table name (default \"characters\")</p> <p>Returns: promise Promise resolving to query results</p>"},{"location":"developer/libraries/nut.db/#nut.db.delete","title":"sh_nut.db.delete","text":"<p>Deletes data from a table Parameters: string dbTable <code>optional</code>  Table name (default \"character\")</p> <p>string condition <code>optional</code>  WHERE condition</p> <p>Returns: promise Promise resolving to query results</p>"},{"location":"developer/libraries/nut.db/#nut.db.prepare","title":"sh_nut.db.prepare","text":"<p>Prepares a SQL statement Parameters: string key  Unique identifier</p> <p>string query  SQL query with <code>?</code> placeholders</p> <p>table types  Parameter types (MYSQLOO_ constants)</p> <p>Usage: <ul> <pre><code>nut.db.prepare(\"itemData\", \"UPDATE nut_items SET _data = ? WHERE _itemID = ?\", {MYSQLOO_STRING, MYSQLOO_INTEGER})\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.db/#nut.db.preparedcall","title":"sh_nut.db.preparedCall","text":"<p>Executes a prepared statement Parameters: string key  Prepared statement identifier</p> <p>function callback <code>optional</code>  Query callback</p> <p>vararg ...  Parameters for the statement</p>"},{"location":"developer/libraries/nut.faction/","title":"nut.faction","text":"<p>Faction System.</p> <p>Handles player factions/teams including whitelists, models, and team management. Factions are just a wrapper over the normal <code>team</code> library. Essentially, each faction associates a table with a team. So, extra information can be stored for teams (e.g. salary, descriptions, etc...). See also Faction Development</p>"},{"location":"developer/libraries/nut.faction/#functions","title":"Functions","text":"nut.faction.loadFromDir (directory) nut.faction.get (identifier) nut.faction.getIndex (uniqueID) nut.faction.formatModelData () nut.faction.hasWhitelist (faction)"},{"location":"developer/libraries/nut.faction/#nut.faction.loadfromdir","title":"sh_nut.faction.loadFromDir","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Loads faction definitions from a directory Parameters: string directory  Path to scan for faction files</p>"},{"location":"developer/libraries/nut.faction/#nut.faction.get","title":"sh_nut.faction.get","text":"<p>Gets a faction by index or uniqueID Parameters: vararg identifier  Faction index (int) or uniqueID (string)</p> <p>Returns: table Faction definition table</p>"},{"location":"developer/libraries/nut.faction/#nut.faction.getindex","title":"sh_nut.faction.getIndex","text":"<p>Gets a faction's numeric index by uniqueID Parameters: string uniqueID  Faction uniqueID</p> <p>Returns: number Faction index</p>"},{"location":"developer/libraries/nut.faction/#nut.faction.formatmodeldata","title":"sh_nut.faction.formatModelData","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Formats the bodygroup data into a uniform style. This allows bodygroup data per model to be submitted in 3 ways: <ol> <li>As a string <code>(\"0121200\")</code></li> <li>As a table with the bodygroup ID as the key <code>{[1] = 2, [2] = 1, [3] = 2, [4] = 0}</code></li> <li>As a table with the bodygroup name as the key <code>{head = 2, shoulders = 1, knees = 2, toes = 0}</code></li> </ol></p>"},{"location":"developer/libraries/nut.faction/#nut.faction.haswhitelist","title":"cl_nut.faction.hasWhitelist","text":"<p>Checks if local player has whitelist for a faction Parameters: number faction  Faction index to check</p> <p>Returns: bool Whether player has whitelist</p>"},{"location":"developer/libraries/nut.flag/","title":"nut.flag","text":"<p>Flag System.</p> <p>Manages character permissions and abilities through single-character flags. Flags must be single characters, though they are case-sensitive, meaning 'T' and 't' are separate flags.</p>"},{"location":"developer/libraries/nut.flag/#functions","title":"Functions","text":"nut.flag.add (flag, desc, callback)"},{"location":"developer/libraries/nut.flag/#nut.flag.add","title":"sh_nut.flag.add","text":"<p>Adds a flag that does something when set. Parameters: string flag  Single-character flag identifier</p> <p>string desc  Description of the flag's purpose</p> <p>function callback <code>optional</code>  Function(client, isGiven) called when flag is granted/revoked</p>"},{"location":"developer/libraries/nut.inventory/","title":"nut.inventory","text":"<p>Inventory System.</p> <p>Base framework for creating and managing different inventory implementations.</p>"},{"location":"developer/libraries/nut.inventory/#functions","title":"Functions","text":"nut.inventory.newType (typeID, invTypeStruct) nut.inventory.new (typeID) nut.inventory.show (inventory, parent) nut.inventory.loadByID (id, noCache) nut.inventory.loadFromDefaultStorage (id, noCache) nut.inventory.instance (typeID, initialData) nut.inventory.loadAllFromCharID (charID) nut.inventory.deleteByID (id) nut.inventory.cleanUpForCharacter (character)"},{"location":"developer/libraries/nut.inventory/#nut.inventory.newtype","title":"sh_nut.inventory.newType","text":"<p>Performs type checking for new inventory types then stores them into nut.inventory.types if there are no errors. Parameters: string typeID  Unique identifier for the inventory type</p> <p>table invTypeStruct  Inventory type definition table</p> <p>Raises: Error if type validation fails or typeID exists Usage: <ul> <pre><code>nut.inventory.newType(\"storage\", {\n    __index = table,\n    add = function(self, item) ... end,\n    remove = function(self, item) ... end,\n    sync = function(self, client) ... end,\n    typeID = \"storage\",\n    className = \"StorageInventory\",\n    config = {size = 10}\n})\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.inventory/#nut.inventory.new","title":"sh_nut.inventory.new","text":"<p>Creates an instance of an inventory class whose type is the given type ID. Parameters: string typeID  Type identifier to instantiate</p> <p>Returns: table New inventory instance</p> <p>Raises: Error if typeID doesn't exist Usage: <ul> <pre><code>local inventory = nut.inventory.new(\"storage\")\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.inventory/#nut.inventory.show","title":"cl_nut.inventory.show","text":"<p>Displays an inventory UI panel (client-only) Parameters: table inventory  Inventory to display</p> <p>Panel parent <code>optional</code>  Parent panel for the UI</p> <p>Returns: panel Created inventory panel</p> <p>See also: <ul> <li>inventory:show</li> </ul></p>"},{"location":"developer/libraries/nut.inventory/#nut.inventory.loadbyid","title":"sh_nut.inventory.loadByID","text":"<p>Loads an inventory by its ID Parameters: number id  Inventory ID to load</p> <p>boolean noCache <code>optional. default</code>: <code>false</code>  Whether to bypass cache</p> <p>Returns: promise Promise resolving to inventory instance</p>"},{"location":"developer/libraries/nut.inventory/#nut.inventory.loadfromdefaultstorage","title":"sh_nut.inventory.loadFromDefaultStorage","text":"<p>Loads inventory from default storage Parameters: number id  Inventory ID to load</p> <p>boolean noCache <code>optional. default</code>: <code>false</code>  Whether to bypass cache</p> <p>Returns: promise Promise resolving to inventory instance</p>"},{"location":"developer/libraries/nut.inventory/#nut.inventory.instance","title":"sh_nut.inventory.instance","text":"<p>Creates a new inventory instance Parameters: string typeID  Inventory type identifier</p> <p>table initialData <code>optional</code>  Initial inventory data</p> <p>Returns: promise Promise resolving to new inventory instance</p>"},{"location":"developer/libraries/nut.inventory/#nut.inventory.loadallfromcharid","title":"sh_nut.inventory.loadAllFromCharID","text":"<p>Loads all inventories for a character Parameters: integer charID  Character ID to load for</p> <p>Returns: promise Promise resolving to table of inventories</p>"},{"location":"developer/libraries/nut.inventory/#nut.inventory.deletebyid","title":"sh_nut.inventory.deleteByID","text":"<p>Deletes an inventory by ID Parameters: integer id  Inventory ID to delete</p>"},{"location":"developer/libraries/nut.inventory/#nut.inventory.cleanupforcharacter","title":"sh_nut.inventory.cleanUpForCharacter","text":"<p>Cleans up inventories for a character Parameters: table character  Character to clean up for</p>"},{"location":"developer/libraries/nut.inventory/#tables","title":"Tables","text":"InventoryTypeDef InventoryInstance"},{"location":"developer/libraries/nut.inventory/#inventorytypedef","title":"sh_InventoryTypeDef","text":"<p>Inventory Type Definition Structure Fields: vararg __index  Metatable reference (must be \"table\")</p> <p>function add  Function to add items (server-only, required)</p> <p>function remove  Function to remove items (server-only, required)</p> <p>function sync  Function to sync inventory (server-only, required)</p> <p>string typeID  Unique string identifier (required)</p> <p>string className  Class name for metatable (required)</p> <p>table config  Configuration table (optional)</p>"},{"location":"developer/libraries/nut.inventory/#inventoryinstance","title":"sh_InventoryInstance","text":"<p>Inventory Instance Structure Fields: vararg config  Type-specific configuration</p> <p>integer id  Unique numeric identifier</p> <p>table items  Table containing inventory items</p>"},{"location":"developer/libraries/nut.item/","title":"nut.item","text":"<p>Item Module.</p> <p>Core system for managing in-game items, their definitions, and instances.</p>"},{"location":"developer/libraries/nut.item/#functions","title":"Functions","text":"nut.item.instance (index, uniqueID, itemData, x, y, callback) nut.item.deleteByID (id) nut.item.loadItemByID (itemIndex, recipientFilter) nut.item.spawn (uniqueID, position, callback, angles, data) nut.item.get (identifier) nut.item.load (path, baseID, isBaseItem) nut.item.isItem (object) nut.item.register (uniqueID, baseID, isBaseItem, path, luaGenerated) nut.item.loadFromDir (directory) nut.item.new (uniqueID, id)"},{"location":"developer/libraries/nut.item/#nut.item.instance","title":"sv_nut.item.instance","text":"<p>Creates a new item instance in the database. Parameters: number index <code>optional. default</code>: <code>nil</code>  Inventory ID (nil for none)</p> <p>string uniqueID  The item's unique identifier</p> <p>table itemData <code>optional. default</code>: <code>{}</code>  Additional item data</p> <p>number x <code>optional</code>  X position in inventory</p> <p>number y <code>optional</code>  Y position in inventory</p> <p>function callback <code>optional</code>  Function to call when item is created</p> <p>Returns: promise Returns a promise that resolves with the item instance</p>"},{"location":"developer/libraries/nut.item/#nut.item.deletebyid","title":"sv_nut.item.deleteByID","text":"<p>Deletes an item from the database by its ID. Parameters: number id  The item ID to delete</p>"},{"location":"developer/libraries/nut.item/#nut.item.loaditembyid","title":"sv_nut.item.loadItemByID","text":"<p>Loads an item from the database by its ID. Parameters: vararg itemIndex  If number, single item ID. Otherwise if table, a table of IDs to load</p> <p>Client recipientFilter <code>optional</code>  Player filter for network messages</p>"},{"location":"developer/libraries/nut.item/#nut.item.spawn","title":"sv_nut.item.spawn","text":"<p>Instances and spawns a given item type. Parameters: string uniqueID  The item's unique identifier</p> <p>Vector position  Where to spawn the item</p> <p>function callback <code>optional</code>  Function to call when spawned (receives item, entity)</p> <p>Angle angles <code>optional</code>  Spawn angles</p> <p>table data <code>optional. default</code>: <code>{}</code>  Additional item data</p> <p>Returns: promise A promise when no callback is provided</p>"},{"location":"developer/libraries/nut.item/#nut.item.get","title":"sh_nut.item.get","text":"<p>Retrieves an item definition table Parameters: string identifier  Unique ID of the item</p> <p>Returns: table Item definition table</p> <p>Usage: <ul> <pre><code>local itemDef = nut.item.get(\"medkit\")\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.item/#nut.item.load","title":"sh_nut.item.load","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Loads an item definition from file Parameters: string path  Path to the item file</p> <p>string baseID  Base item ID to inherit from</p> <p>boolean isBaseItem  Whether this is a base item definition</p>"},{"location":"developer/libraries/nut.item/#nut.item.isitem","title":"sh_nut.item.isItem","text":"<p>Checks if an object is a valid item instance Parameters: vararg object  Object to check</p> <p>Returns: bool Whether object is an item</p> <p>Usage: <ul> <pre><code>if nut.item.isItem(entity) then print(\"Is item\") end\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.item/#nut.item.register","title":"sh_nut.item.register","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Registers a new item definition Parameters: string uniqueID  Unique ID for the item</p> <p>string baseID  Base item ID to inherit from</p> <p>boolean isBaseItem  Whether this is a base item</p> <p>string path  Path to the item definition file</p> <p>boolean luaGenerated  Whether item is generated dynamically</p> <p>Returns: table Registered item definition</p>"},{"location":"developer/libraries/nut.item/#nut.item.loadfromdir","title":"sh_nut.item.loadFromDir","text":"<p>Loads all items from a directory Parameters: string directory  Directory to scan for item files</p> <p>Usage: <ul> <pre><code>nut.item.loadFromDir(\"nutscript/items\")\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.item/#nut.item.new","title":"sh_nut.item.new","text":"<p>Creates a new item instance Parameters: string uniqueID  Item definition ID</p> <p>number id  Unique instance ID</p> <p>Returns: table New item instance</p> <p>Usage: <ul> <pre><code>local medkit = nut.item.new(\"medkit\", 123)\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.item/#tables","title":"Tables","text":"ItemDef ItemInstance"},{"location":"developer/libraries/nut.item/#itemdef","title":"sh_ItemDef","text":"<p>Item Definition Structure Fields: string uniqueID  Unique identifier</p> <p>string name  Display name</p> <p>string desc  Description text</p> <p>string model  World model path</p> <p>integer width  Inventory width</p> <p>integer height  Inventory height</p> <p>string category  Organizational category</p> <p>table hooks  Table of event hooks</p> <p>table functions  Table of interaction functions</p>"},{"location":"developer/libraries/nut.item/#iteminstance","title":"sh_ItemInstance","text":"<p>Item Instance Structure Fields: integer id  Unique instance ID</p> <p>table data  Custom data storage</p> <p>Inventory inventory  Current inventory reference</p>"},{"location":"developer/libraries/nut.lang/","title":"nut.lang","text":"<p>Language Module.</p> <p>Handles multilingual text storage, retrieval, and formatting.</p>"},{"location":"developer/libraries/nut.lang/#functions","title":"Functions","text":"nut.lang.loadFromDir (directory)"},{"location":"developer/libraries/nut.lang/#nut.lang.loadfromdir","title":"sh_nut.lang.loadFromDir","text":"<p>Loads language files from a directory Parameters: string directory  Path containing language files (sh_*.lua)</p> <p>Usage: <ul> <pre><code>nut.lang.loadFromDir(\"nutscript/language\")\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.menu/","title":"nut.menu","text":"<p>Library functions for nut.menu.</p> <p>nut.menu is the interaction menu that appears when interacting with NS entities and characters.</p>"},{"location":"developer/libraries/nut.menu/#functions","title":"Functions","text":"nut.menu.add (options, position, onRemove) nut.menu.drawAll () nut.menu.getActiveMenu () nut.menu.onButtonPressed (menu, callback)"},{"location":"developer/libraries/nut.menu/#nut.menu.add","title":"cl_nut.menu.add","text":"<p>Adds a new menu to the list of drawn menus. Parameters: table options  Table of button text as keys and their callbacks as values</p> <p>vararg position  If Vector: Menu position, otherwise if Entiy: entity to position menu on</p> <p>function onRemove <code>optional</code>  Function to call after menu fades out</p> <p>Returns: number Index of the menu in the list</p>"},{"location":"developer/libraries/nut.menu/#nut.menu.drawall","title":"cl_nut.menu.drawAll","text":"<p>Draws all active menus or hides them when needed.</p>"},{"location":"developer/libraries/nut.menu/#nut.menu.getactivemenu","title":"cl_nut.menu.getActiveMenu","text":"<p>Determines which menu is being looked at. Returns: number Index of the active menu</p> <p>function Callback of the currently hovered option</p>"},{"location":"developer/libraries/nut.menu/#nut.menu.onbuttonpressed","title":"cl_nut.menu.onButtonPressed","text":"<p>Handles button press events for menus. Parameters: number menu  The menu index</p> <p>function callback  Function to execute when pressed</p> <p>Returns: bool Whether the button was successfully pressed</p>"},{"location":"developer/libraries/nut.playerInteract/","title":"nut.playerInteract","text":"<p>Base library for the player interaction menu library.</p> <p>Hehehahahoo.</p>"},{"location":"developer/libraries/nut.playerInteract/#functions","title":"Functions","text":"nut.playerInteract.addFunc (name, data) nut.playerInteract.interact (entity, time) nut.playerInteract.clear ()"},{"location":"developer/libraries/nut.playerInteract/#nut.playerinteract.addfunc","title":"cl_nut.playerInteract.addFunc","text":"<p>Adds a new player interaction button to the interaction system. Parameters: string name  Unique identifier for the interaction</p> <p>table data  Configuration table for the interaction</p> <p>Usage: <ul> <pre><code>nut.playerInteract.addFunc(\"recognize\", {\n    nameLocalized = \"recognize\",\n    callback = function(target)\n        netstream.Start(\"rgnDirect\", target)\n    end,\n    canSee = function(target)\n        return true\n    end\n})\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.playerInteract/#nut.playerinteract.interact","title":"cl_nut.playerInteract.interact","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Initiates interaction with a player entity. Parameters: Entity entity  The player entity to interact with</p> <p>number time  Duration of the interaction animation</p>"},{"location":"developer/libraries/nut.playerInteract/#nut.playerinteract.clear","title":"cl_nut.playerInteract.clear","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Clears the current player interaction.</p>"},{"location":"developer/libraries/nut.plugin/","title":"nut.plugin","text":"<p>Plugin Module.</p> <p>Core system for loading and managing NutScript plugins and schema components.</p>"},{"location":"developer/libraries/nut.plugin/#functions","title":"Functions","text":"nut.plugin.load (uniqueID, path, isSingleFile, variable) nut.plugin.loadExtras (path) nut.plugin.loadEntities (path) nut.plugin.initialize () nut.plugin.loadFromDir (directory) nut.plugin.setDisabled (uniqueID, disabled) nut.plugin.isDisabled (uniqueID)"},{"location":"developer/libraries/nut.plugin/#nut.plugin.load","title":"sh_nut.plugin.load","text":"<p>Loads a plugin from specified path Parameters: string uniqueID  Unique plugin identifier</p> <p>string path  Path to plugin directory</p> <p>boolean isSingleFile <code>optional. default</code>: <code>false</code>  Whether loading single file</p> <p>string variable <code>optional. default</code>: <code>\"PLUGIN\"</code>  Global variable name</p> <p>Usage: <ul> <pre><code>nut.plugin.load(\"myplugin\", \"plugins/myplugin\")\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.plugin/#nut.plugin.loadextras","title":"sh_nut.plugin.loadExtras","text":"<p>Loads additional plugin resources Parameters: string path  Base plugin path</p> <p>Usage: <ul> <pre><code>nut.plugin.loadExtras(\"plugins/myplugin\")\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.plugin/#nut.plugin.loadentities","title":"sh_nut.plugin.loadEntities","text":"<p>Loads entities from plugin directory Parameters: string path  Path to entities directory</p> <p>Usage: <ul> <pre><code>nut.plugin.loadEntities(\"plugins/myplugin/entities\")\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.plugin/#nut.plugin.initialize","title":"sh_nut.plugin.initialize","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> <p>Initializes core plugin system</p> <p>Usage: <ul> <pre><code>nut.plugin.initialize()\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.plugin/#nut.plugin.loadfromdir","title":"sh_nut.plugin.loadFromDir","text":"<p>Loads all plugins from directory Parameters: string directory  Directory to scan</p> <p>Usage: <ul> <pre><code>nut.plugin.loadFromDir(\"plugins\")\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.plugin/#nut.plugin.setdisabled","title":"sv_nut.plugin.setDisabled","text":"<p>Sets plugin disabled state Parameters: string uniqueID  Plugin identifier</p> <p>boolean disabled  Whether to disable</p> <p>Usage: <ul> <pre><code>nut.plugin.setDisabled(\"myplugin\", true)\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.plugin/#nut.plugin.isdisabled","title":"sh_nut.plugin.isDisabled","text":"<p>Checks if plugin is disabled Parameters: string uniqueID  Plugin identifier</p> <p>Returns: bool Disabled status</p> <p>Usage: <ul> <pre><code>if nut.plugin.isDisabled(\"myplugin\") then return end\n</code></pre> </ul></p>"},{"location":"developer/libraries/nut.plugin/#tables","title":"Tables","text":"PluginDef"},{"location":"developer/libraries/nut.plugin/#plugindef","title":"sh_PluginDef","text":"<p>Plugin Definition Structure Fields: vararg uniqueID  Unique string identifier</p> <p>vararg name  Display name</p> <p>vararg desc  Description text</p> <p>vararg author  Author name</p> <p>vararg folder  Plugin directory path</p> <p>vararg loading  Loading state flag</p>"},{"location":"developer/libraries/nut.util/","title":"nut.util","text":"<p>Utility module.</p> <p>This module contains numerous useful utility functions used within other modules and classes.</p>"},{"location":"developer/libraries/nut.util/#general-utility-functions","title":"General Utility Functions","text":"<p>Provides various helpers for file inclusion, server data handling, player properties, and math-based utilities.</p> nut.util.include (fileName, state) nut.util.includeDir (directory, fromLua, recursive) nut.util.getAddress () nut.util.getAdmins (isSuper) nut.util.isSteamID (value) nut.util.findPlayer (identifier, allowPatterns) nut.util.gridVector (vec, gridSize) nut.util.getAllChar () nut.util.getMaterial (materialPath)"},{"location":"developer/libraries/nut.util/#nut.util.include","title":"sh_nut.util.include","text":"<p>Includes a Lua file depending on filename prefix or forced state. Parameters: string fileName  The file name to include</p> <p>string state <code>optional</code>  One of 'server', 'shared', or 'client'</p>"},{"location":"developer/libraries/nut.util/#nut.util.includedir","title":"sh_nut.util.includeDir","text":"<p>Includes all Lua files in a directory with optional recursion. Parameters: string directory  Directory to search for files</p> <p>boolean fromLua <code>optional. default</code>: <code>false</code>  Whether to include relative from /lua</p> <p>boolean recursive <code>optional. default</code>: <code>false</code>  Whether to include subdirectories</p>"},{"location":"developer/libraries/nut.util/#nut.util.getaddress","title":"sv_nut.util.getAddress","text":"<p>Deprecated.  Returns the server's IP address.  Use <code>game.GetIPAddress()</code> instead. Returns: string IP address and port</p>"},{"location":"developer/libraries/nut.util/#nut.util.getadmins","title":"sv_nut.util.getAdmins","text":"<p>Returns a table of admin or superadmin players. Parameters: boolean isSuper <code>optional. default</code>: <code>false</code>  True to return only superadmins</p> <p>Returns: tab Table of Player objects</p>"},{"location":"developer/libraries/nut.util/#nut.util.issteamid","title":"sh_nut.util.isSteamID","text":"<p>Returns true if a string is a 32-bit SteamID. Parameters: string value  The string to test</p> <p>Returns: bool True if valid SteamID</p>"},{"location":"developer/libraries/nut.util/#nut.util.findplayer","title":"sv_nut.util.findPlayer","text":"<p>Finds a player by name or SteamID. Parameters: string identifier  Player name or SteamID</p> <p>boolean allowPatterns <code>optional. default</code>: <code>false</code>  Whether to allow pattern search</p> <p>Returns: client Matching player</p> <p>Or nil If no match found</p>"},{"location":"developer/libraries/nut.util/#nut.util.gridvector","title":"sh_nut.util.gridVector","text":"<p>Snaps a vector to the nearest point on a grid. Parameters: Vector vec  The vector to round</p> <p>number gridSize  Grid spacing</p> <p>Returns: vector Snapped vector</p>"},{"location":"developer/libraries/nut.util/#nut.util.getallchar","title":"sv_nut.util.getAllChar","text":"<p>Gets all active character IDs from connected players. Returns: tab Table of character IDs</p>"},{"location":"developer/libraries/nut.util/#nut.util.getmaterial","title":"sh_nut.util.getMaterial","text":"<p>Returns a single cached copy of a material or creates it if it doesn't exist. Parameters: string materialPath  Path to the material</p> <p>Returns: Material The loaded or cached material</p>"},{"location":"developer/libraries/nut.util/#blur-drawing-utilities","title":"Blur Drawing Utilities","text":"<p>Provides functions to draw blurred backgrounds behind panels or at specific coordinates, with support for performance-friendly fallback.</p> nut.util.drawBlur (panel, amount, passes) nut.util.drawBlurAt (x, y, w, h, amount, passes)"},{"location":"developer/libraries/nut.util/#nut.util.drawblur","title":"cl_nut.util.drawBlur","text":"<p>Draws a blurred material over the screen, to blur things.  Automatically uses a cheaper fallback if the <code>nut_cheapblur</code> convar is enabled. Parameters: Panel panel  The panel to apply blur behind</p> <p>number amount <code>optional. default</code>: <code>5</code>  The intensity of the blur</p> <p>number passes <code>optional. default</code>: <code>0.2</code>  How many blur layers to draw</p>"},{"location":"developer/libraries/nut.util/#nut.util.drawblurat","title":"cl_nut.util.drawBlurAt","text":"<p>Draws a blurred background at a given screen rectangle.  Automatically uses a cheaper fallback if the <code>nut_cheapblur</code> convar is enabled. Parameters: integer x  X-coordinate</p> <p>integer y  Y-coordinate</p> <p>integer w  Width of the blur region</p> <p>integer h  Height of the blur region</p> <p>number amount <code>optional. default</code>: <code>5</code>  The intensity of the blur</p> <p>number passes <code>optional. default</code>: <code>0.2</code>  How many blur layers to draw</p>"},{"location":"developer/libraries/nut.util/#drawing-utilities","title":"Drawing Utilities","text":"<p>Provides helper functions for text rendering and resolution tracking in NutScript.</p> nut.util.drawText (text, x, y, color, alignX, alignY, font, alpha) nut.util.wrapText (text, width, font)"},{"location":"developer/libraries/nut.util/#nut.util.drawtext","title":"cl_nut.util.drawText","text":"<p>Draw a text with a shadow. Parameters: string text  The string to draw</p> <p>integer x  X-position</p> <p>integer y  Y-position</p> <p>Color color  Text color (defaults to white)</p> <p>integer alignX <code>optional. default</code>: <code>0</code>  Horizontal alignment (0 = left, 1 = center, 2 = right)</p> <p>integer alignY <code>optional. default</code>: <code>0</code>  Vertical alignment (0 = top, 1 = center, 2 = bottom)</p> <p>string font <code>optional. default</code>: <code>\"nutGenericFont\"</code>  Font to use</p> <p>number alpha <code>optional</code>  Override alpha value</p> <p>Returns: number Width of the drawn text</p>"},{"location":"developer/libraries/nut.util/#nut.util.wraptext","title":"cl_nut.util.wrapText","text":"<p>Wraps text so it does not pass a certain width. Parameters: string text  The string to wrap</p> <p>number width  Maximum line width in pixels</p> <p>string font <code>optional. default</code>: <code>\"nutChatFont\"</code>  Font used to measure width</p> <p>Returns: table Array of wrapped lines</p> <p>number Maximum line width</p>"},{"location":"developer/libraries/nut.util/#notification-utilities","title":"Notification Utilities","text":"<p>Handles localized and plain chat notifications sent from the server or generated locally.</p> nut.util.notify (message) nut.util.notifyLocalized (message, ...) nut.util.notify (message, recipient) nut.util.notifyLocalized (message, recipient, ...)"},{"location":"developer/libraries/nut.util/#nut.util.notify","title":"cl_nut.util.notify","text":"<p>Displays a plain chat message. Parameters: string message  The message to display</p>"},{"location":"developer/libraries/nut.util/#nut.util.notifylocalized","title":"cl_nut.util.notifyLocalized","text":"<p>Creates a translated notification. Parameters: string message  The localization key</p> <p>vararg ...  Optional arguments to insert into the message</p>"},{"location":"developer/libraries/nut.util/#nut.util.notify","title":"sv_nut.util.notify","text":"<p>Sends a plain text notification to a player or broadcasts it. Parameters: string message  The message to display</p> <p>vararg recipient <code>optional</code>  A single player, table of players, or <code>nil</code> to broadcast</p>"},{"location":"developer/libraries/nut.util/#nut.util.notifylocalized","title":"sv_nut.util.notifyLocalized","text":"<p>Sends a localized message to a player or broadcasts it.  Accepts optional arguments for translation. Parameters: string message  The localization key</p> <p>vararg recipient <code>optional</code>  A single player, table of players, or <code>nil</code> to broadcast</p> <p>vararg ...  Optional translation arguments</p>"},{"location":"developer/libraries/nut.util/#queued-sound-utility","title":"Queued Sound Utility","text":"<p>Plays a sequence of sounds from an entity with optional delay and timing control.</p> nut.util.emitQueuedSounds (entity, sounds, delay, spacing, volume, pitch)"},{"location":"developer/libraries/nut.util/#nut.util.emitqueuedsounds","title":"sv_nut.util.emitQueuedSounds","text":"<p>Plays a sequence of sounds from an entity with optional spacing, volume, and pitch.  Accepts tables of sounds with optional time offsets. Parameters: Entity entity  The entity emitting the sounds</p> <p>table sounds  Array of sounds or sound tables {soundPath, postDelay, preDelay}</p> <p>number delay <code>optional. default</code>: <code>0</code>  Initial delay before the first sound</p> <p>number spacing <code>optional. default</code>: <code>0.1</code>  Spacing between sounds</p> <p>number volume <code>optional</code>  Sound volume</p> <p>number pitch <code>optional</code>  Sound pitch</p> <p>Returns: number Total time taken to emit all sounds</p>"},{"location":"developer/libraries/nut.util/#string-comparison-utility","title":"String Comparison Utility","text":"<p>Provides a helper to check for strict or loose matching between two strings.</p> nut.util.stringMatches (a, b)"},{"location":"developer/libraries/nut.util/#nut.util.stringmatches","title":"sh_nut.util.stringMatches","text":"<p>Returns whether two strings match strictly or loosely.  Performs case-insensitive comparison and substring searching. Parameters: string a  The first string</p> <p>string b  The second string</p> <p>Returns: bool True if the strings match</p>"},{"location":"developer/libraries/nut.util/#time-utilities","title":"Time Utilities","text":"<p>Provides utilities for parsing, formatting, and comparing time values.</p> nut.util.getUTCTime () nut.util.getStringTime (text) nut.util.dateToNumber (str)"},{"location":"developer/libraries/nut.util/#nut.util.getutctime","title":"sh_nut.util.getUTCTime","text":"<p>Gets the current time in the UTC time-zone. Returns: int UTC time offset in seconds</p>"},{"location":"developer/libraries/nut.util/#nut.util.getstringtime","title":"sh_nut.util.getStringTime","text":"<p>Gets the amount of seconds from a given formatted string.  Example: 5y2d7w = 5 years, 2 days, and 7 weeks.  If just given a minute, it is assumed minutes. Parameters: string text  The time string to parse</p> <p>Returns: int The number of seconds represented</p>"},{"location":"developer/libraries/nut.util/#nut.util.datetonumber","title":"sh_nut.util.dateToNumber","text":"<p>Parses a timestamp string into a date table.  Uses the current timestamp if none is provided. Parameters: string str <code>optional</code>  Timestamp in format \"%Y-%m-%d %H:%M:%S\"</p> <p>Returns: table Table with year, month, day, hour, min, sec keys</p>"},{"location":"developer/libraries/nut.util/#ragdoll-utilities","title":"Ragdoll utilities","text":"<p>Provides a function to locate an empty viable space around an entity. Used, for instance, when a player ragdoll is removed and the player entity's position must be appropriately placed.</p> nut.util.findEmptySpace (entity, filter, spacing, size, height, tolerance)"},{"location":"developer/libraries/nut.util/#nut.util.findemptyspace","title":"sv_nut.util.findEmptySpace","text":"<p>Attempts to find empty positions around an entity.  Checks a grid and returns sorted viable positions. Parameters: Entity entity  The entity to start from</p> <p>vararg filter <code>optional</code>  Filter to exclude from traces</p> <p>number spacing <code>optional. default</code>: <code>32</code>  Distance between grid points</p> <p>number size <code>optional. default</code>: <code>3</code>  Grid radius to search</p> <p>number height <code>optional. default</code>: <code>36</code>  Height of bounding box</p> <p>number tolerance <code>optional. default</code>: <code>5</code>  Z tolerance for ground check</p> <p>Returns: table Array of viable positions</p>"},{"location":"developer/plugins/Area/","title":"Area","text":"<p>Designate areas within a map.  Players entering an area get a popup with the area name.</p>"},{"location":"developer/plugins/Area/#functions","title":"Functions","text":"nut.area.getArea (areaID) nut.area.getAllArea () nut.area.addArea (name, vector1, vector2, desc) nut.area.openAreaManager ()"},{"location":"developer/plugins/Area/#nut.area.getarea","title":"sv_nut.area.getArea","text":"Plugin function <p>This is defined and used within the Area plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>get an area's data with its id Parameters: integer areaID  The area ID of the area</p> <p>Returns: table area The requested area</p>"},{"location":"developer/plugins/Area/#nut.area.getallarea","title":"sv_nut.area.getAllArea","text":"Plugin function <p>This is defined and used within the Area plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>get all areas of the current map Returns: table All current areas of the current map</p>"},{"location":"developer/plugins/Area/#nut.area.addarea","title":"sv_nut.area.addArea","text":"Plugin function <p>This is defined and used within the Area plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>add a new area. Parameters: string name  Name of the area (Will appear in a pop-up upon entering)</p> <p>Vector vector1  First corner of the area.</p> <p>Vector vector2  Opposite corner of the area from Vector1</p> <p>string desc <code>optional. default</code>: <code>\"none\"</code>  Internal description of the area</p>"},{"location":"developer/plugins/Area/#nut.area.openareamanager","title":"cl_nut.area.openAreaManager","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> Plugin function <p>This is defined and used within the Area plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Open the area Manager on the client's screen</p>"},{"location":"developer/plugins/Area/#client-methods","title":"Client methods","text":"playerMeta:isInArea (areaID) playerMeta:getArea ()"},{"location":"developer/plugins/Area/#playermetaisinarea","title":"sv_playerMeta:isInArea","text":"Plugin function <p>This is defined and used within the Area plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Check if player is in an area.  This is for single check (ex: area items, checking area in commands) Parameters: integer areaID  The ID of the area to test for</p> <p>Returns: bool whether player is in specified area</p> <p>Or false</p> <p>string error message</p>"},{"location":"developer/plugins/Area/#playermetagetarea","title":"sv_playerMeta:getArea","text":"Plugin function <p>This is defined and used within the Area plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Get the client's current Area.  This is for continous checks (ex: checking gas area whatever.)</p>"},{"location":"developer/plugins/Area/#plugin-hooks","title":"Plugin Hooks","text":"PLUGIN:saveAreas () PLUGIN:OnPlayerAreaChanged (client, areaID)"},{"location":"developer/plugins/Area/#pluginsaveareas","title":"sv_PLUGIN:saveAreas","text":"Plugin function <p>This is defined and used within the Area plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Save the current area information to disk.</p>"},{"location":"developer/plugins/Area/#pluginonplayerareachanged","title":"sv_PLUGIN:OnPlayerAreaChanged","text":"Plugin function <p>This is defined and used within the Area plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>If area is changed, display the new area's name to the client's screen. Parameters: Client client  target client entity</p> <p>integer areaID  ID of the new area</p>"},{"location":"developer/plugins/Attributes/","title":"Attributes","text":"<p>Attributes that define various RPG stats of a character.  Attributes allow characters to be more defined within an RPG context.</p>"},{"location":"developer/plugins/Attributes/#functions","title":"Functions","text":"nut.attribs.loadFromDir (directory) nut.attribs.setup (client)"},{"location":"developer/plugins/Attributes/#nut.attribs.loadfromdir","title":"sh_nut.attribs.loadFromDir","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Load attribute files from a directory. Parameters: string directory  Path of the directory containing attribute files</p>"},{"location":"developer/plugins/Attributes/#nut.attribs.setup","title":"sh_nut.attribs.setup","text":"<p>Internal</p> <p>This is used internally - although you're able to use it you probably shouldn't.</p> Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Run onSetup functions of each relevant attribute on a client. Parameters: Client client  Target player entity</p>"},{"location":"developer/plugins/Attributes/#character-methods","title":"Character methods","text":"charMeta:updateAttrib (key, value) charMeta:setAttrib (key, value) charMeta:addBoost (boostID, attribID, boostAmount) charMeta:removeBoost (boostID, attribID) charMeta:getBoost (attribID) charMeta:getBoosts () charMeta:getAttrib (key, default)"},{"location":"developer/plugins/Attributes/#charmetaupdateattrib","title":"sv_charMeta:updateAttrib","text":"Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>adds a value to a character's attribute.  The new value cannot exceed the attributes maxValue or the maxAttribs config Parameters: string key  the id of attribute</p> <p>number value  the value to be added</p>"},{"location":"developer/plugins/Attributes/#charmetasetattrib","title":"sv_charMeta:setAttrib","text":"Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>sets  a character's attribute value. Parameters: string key  the id of attribute</p> <p>number value  the value to be added</p>"},{"location":"developer/plugins/Attributes/#charmetaaddboost","title":"sv_charMeta:addBoost","text":"Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>adds a boost to a character's attribute.  The boost acts as a (semi-)temporary change to the attribute value without changing the base value. Parameters: string boostID  ID of the boost. Used to easily edit/remove the boost later</p> <p>string attribID  the id of attribute</p> <p>number boostAmount  the value to be added</p>"},{"location":"developer/plugins/Attributes/#charmetaremoveboost","title":"sv_charMeta:removeBoost","text":"Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>removes a boost from a character's attribute. Parameters: string boostID  ID of the boost</p> <p>string attribID  the id of attribute</p>"},{"location":"developer/plugins/Attributes/#charmetagetboost","title":"sh_charMeta:getBoost","text":"Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Get all applied boosts to a character's attribute. Parameters: string attribID  ID of the attribute</p> <p>Returns: table A list of boosts applied to the character's attribute</p>"},{"location":"developer/plugins/Attributes/#charmetagetboosts","title":"sh_charMeta:getBoosts","text":"Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Get all boosts applied to a character, across all attributes. Returns: table A list of all boosts applied to a character</p>"},{"location":"developer/plugins/Attributes/#charmetagetattrib","title":"sh_charMeta:getAttrib","text":"Plugin function <p>This is defined and used within the Attributes plugin. As such, its functionality might differ in different schemas, or be unavailable.</p> <p>Get a character's current attribute value.  Includes applied boosts. Parameters: string key  the ID of the attribute</p> <p>number default  the default value if the character does not have an attribute value</p>"},{"location":"guides/development/developing_plugins/","title":"Developing Plugins","text":"<p>Plugins are modular extensions to the schema that add or modify the gameplay of your gamemode. While it is possible to write all your code within the schema folder, using plugins is recommended as it allows you to easily add, modify and/or remove organized code.</p> <p>There are 2 ways to create a plugin in NutScript:</p> <ol> <li>Single-file plugins, for small plugins such as Permakill.</li> <li>Folder based plugins, for bigger plugins that use items, languages, entities or derma, such as Vendor.</li> </ol>"},{"location":"guides/development/developing_plugins/#single-file-plugins","title":"Single File Plugins","text":"<ol> <li>Create a new <code>.lua</code> file in the plugins folder. Name the file whatever the plugin's name is. (e.g. <code>permakill.lua</code>).</li> </ol>"},{"location":"guides/development/developing_plugins/#folder-based-plugins","title":"Folder Based Plugins","text":"<ol> <li>Create a new folder in the plugins folder. Name the folder whatever the plugin's name is. (e.g. <code>vendor</code>).</li> <li>Create a new file within the plugin folder. Name it <code>sh_plugin.lua</code>.</li> </ol>"},{"location":"guides/development/developing_plugins/#starting","title":"Starting","text":"<p>In your plugin/<code>sh_plugin.lua</code> file, include the following:</p> <pre><code>PLUGIN.name = \"Plugin Name\"\nPLUGIN.author = \"You, the Creator\"\nPLUGIN.desc = \"A simple plugin that does something.\"\n</code></pre> <p>Here you'll need to set your plugin's name, the author, and a short description of what it does.</p>"},{"location":"guides/development/developing_plugins/#hooking","title":"Hooking","text":"<p>Normally, to hook a function, you'll need to use the following syntax: <pre><code>hook.Add(\"Think\", \"myUniqueFunction\", function()\n    -- Do stuff\nend)\n</code></pre></p> <p>However, NutScript has a special syntax for hooking functions within plugins.</p> <pre><code>function PLUGIN:Think()\n    -- Do stuff\nend\n</code></pre>"},{"location":"guides/development/developing_plugins/#why-plugin","title":"Why PLUGIN?","text":"<p>The PLUGIN prefix allows us to tell NutScript that we are extending the functions we are going to use, rather than completely replace them with the ones we set inside the file. This prevents code from being removed from execution and therefore breaking some aspects of the gamemode or other plugins.</p> <p>Advantages of using PLUGIN:</p> <ol> <li> <p>It gives the hooked code priority when executed. Meaning that code added via PLUGIN will run before most code added by addons.</p> </li> <li> <p>It allows you to use code defined by PLUGIN to be run elsewhere in the gamemode.</p> <p>Example</p> <p>If you have a plugin <code>permadeath.lua</code> that defines a function called <code>PLUGIN:PlayerDeath(client, inflictor, attacker)</code>, and another plugin called <code>medical</code>, you can have a function in the <code>medical</code> plugin call the <code>permadeath</code> PlayerDeath hook without running any other code that has been hooked to PlayerDeath, via <code>nut.plugin.list.permadeath:PlayerDeath(client, inflictor, attacker)</code>.</p> </li> <li> <p>It allows to store variables specific to the plugin.</p> <ul> <li>For example</li> </ul> <pre><code>local curEnts = {}\n</code></pre> <p>is a table only available within the file/scope where it was defined.</p> <p>However</p> <pre><code>PLUGIN.curEnts = {}\n</code></pre> <p>is a table that is available (within the respective realm) to all files/scopes within the plugin, as well as accessible from other plugins (<code>nut.plugin.list.permadeath.curEnts</code>).</p> </li> </ol>"},{"location":"guides/development/developing_plugins/#example","title":"Example","text":"<p>An example of a plugin creation can be found here.</p> <p>Tip</p> <p>It is recommended that you use plugins as puzzle pieces that fit into your gamemode. Creating plugins not only makes it easier to develop and enhance sections of your gamemode, your schema will remain organized as it gets larger.</p>"},{"location":"guides/development/developing_schema/","title":"Developing the Schema","text":""},{"location":"guides/development/developing_schema/#initial-setup","title":"Initial Setup","text":"<p>Make sure that you have the Nutscript framework already installed in the gamemodes folder (rename it to <code>nutscript</code>). In the same gamemodes plugin, place/create your schema folder, and name it as the name of your schema (hl2rp/cityrp/scprp) </p>"},{"location":"guides/development/developing_schema/#the-main-schema-folder","title":"The Main Schema Folder","text":"<p>Within the Schema folder, you must have 3 additional folders:</p> <ul> <li>gamemode</li> <li>plugins</li> <li> <p>schema</p> <p>and one .txt file named identically to your schema name (that is, if your schema is called hl2rp, the txt must also be called hl2rp.txt)</p> </li> </ul> <p>Warning</p> <p>As a Rule of Thumb, you should not modify the gamemode folder at any point. Please look at pre-existing schemas and copy the gamemode folder from there.</p> <ul> <li> <p>The <code>plugins</code> folder is used to install additional plugins to the schema.</p> </li> <li> <p>The <code>schema</code> folder contains the core files of your schema.</p> </li> </ul>"},{"location":"guides/development/developing_schema/#the-schema-folder","title":"The Schema Folder","text":"<p>Within the <code>schema</code> folder, you must have 2 crucial folders: <code>items</code> and <code>factions</code>, as well as a crucial file called <code>sh_schema.lua</code></p>"},{"location":"guides/development/developing_schema/#the-factions-folder","title":"The Factions Folder","text":"<p>The <code>factions</code> folder is used to create new factions playable on your gamemode. Each faction is represented by their individual file.</p> <p>Example</p> <p>For example, if you want to have 3 factions called \"Citizen\", \"Police\" and \"Insurgents\", you would have 3 files within the factions folder <pre><code>sh_citizen.lua\nsh_police.lua\nsh_insurgents.lua\n</code></pre></p> <p>Each file must contain the following code:</p> <pre><code>FACTION.name = \"Custom Faction\" -- the name of your faction as it appears in-game\nFACTION.desc = \"Custom faction for only some people to use.\" -- the faction's description, as seen in the character creation screen\nFACTION.color = Color(255, 0, 0) -- the faction's color, as it appears in the scoreboard\nFACTION.isDefault = false -- If this is set to true, anyone can create a character within this faction. If false, players would require a whitelist, or a character would require a transfer\nFACTION.pay = 40 -- The default pay received every period of time.\nFACTION.isGloballyRecognized = true -- Used by the recognition plugin. If this is set to true, characters within the faction are automatically recognized.\n\n\nFACTION.weapons = { -- SWEPs that are given to members of the faction. Be advised that these are not items, rather SWEPs, therefore they do not fill the inventory, and cannot be dropped.\n    \"nut_stunstick\"\n}\n\nFACTION.models = { -- default models available to the faction. The larger the list here, the bigger the options of models are for players when creating a new character\n    \"models/police.mdl\",\n    \"models/alyx.mdl\"\n}\n\nFACTION_CUSTOM = FACTION.index -- mandatory, this allows the faction to be indexed in code elsewhere. Replace FACTION_CUSTOM with FACTION_#### where #### is a unique string for your faction.\n</code></pre> <p>Note</p> <p>More information and options available for factions is available here.</p>"},{"location":"guides/development/developing_schema/#the-items-folder","title":"The Items Folder","text":"<p>The <code>items</code> folder contains all the items that your schema provides.</p> <p>There are 2 methods to adding items to your schema: single file items or via a base</p>"},{"location":"guides/development/developing_schema/#single-file-items","title":"Single File Items","text":"<p>You can add an item as a single file by creating one in the <code>items</code> folder directly. For example, if you want to create a potato item, you would create a new file called <code>sh_potato.lua</code></p> <p>Inside the file, you must have this code:</p> <pre><code>ITEM.name = \"A Potato\" -- item name\nITEM.desc = \"Boil em, Mash em, Stick em in a stew.\" -- item description\nITEM.price = 0 -- the default price, used by vendors and business tabs, for instance\nITEM.model = \"models/props_junk/Shoe001a.mdl\" -- the item's model\nITEM.category = \"Other\" -- the item's category\nITEM.uniqueID = \"potato\" -- optional field, used for ease of reference in code\n-- you may add additional custom information that can be used by functions that use the item\nITEM.health = 10\n</code></pre> <p>If you want your items to have functionality, you may add functions via <code>ITEM.functions.&lt;name&gt;</code>. For example:</p> <pre><code>ITEM.functions.use = {\n    name = \"Consume\", --Name of the function, if this doesn't exist it'll use \"use\"\n    tip = \"Consume the item.\", --Tip when hovering over the function\n    icon = \"icon16/cup.png\", --Icon for the function\n    onRun = function(item, data)\n        item.player:EmitSound(\"items/battery_pickup.wav\") --Play a cool sound\n        item.player:SetHealth(item.player:Health() + item.health) --Give health to player when they consume\n        item.player:notifyLocalized(\"You consume \"..string.lower(item.name)..\" for \"..item.health..\" health.\") --Send message to player\n                return true -- This is optional. Returning true in the function deletes the item from the inventory. This is useful if you want single-use items, however, if you want to avoid that, remove the return\n    end\n}\n</code></pre>"},{"location":"guides/development/developing_schema/#using-a-base","title":"Using a Base","text":"<p>Using a base is useful if you want multiple items that function relatively identical, such as foods or weapons.</p> <p>To create items via a base, you need to create 2 folders: <code>base</code> and a folder with the base name. For example, if I want to create a food item base, I would have 2 folders named</p> <pre><code>base\nfood\n</code></pre> <p>Inside the base folder, create a lua file called the same as the target base folder</p> <p>Example</p> <p>For instance, if I am creating a food item base, I would create a file called <code>sh_food.lua</code></p> <p>Inside this new file goes the default information of the item. Items defined within the target base folder will inherit all the values and functions from this base file.</p> <p>Let's create a food base</p> <pre><code>ITEM.name = \"Food Base\"\nITEM.model = \"models/Gibs/HGIBS.mdl\"\nITEM.desc = \"Tasty food, or tasy drink.\"\nITEM.width = 1 -- used by the gridinv plugin, this allows to modify the size of the item within the inventory\nITEM.height = 1 -- used by the gridinv plugin, this allows to modify the size of the item within the inventory\nITEM.category = \"Food\"\nITEM.health = 0\nITEM.action = \"consume\"\n\n--[[-------------------------------------------------------------------------\nPurpose: Create a function that these items will use. ITEM.health and ITEM.action\nwere parameters that I created.\n---------------------------------------------------------------------------]]\nITEM.functions.use = {\n    name = \"Consume\", --Name of the function, if this doesn't exist it'll use \"use\"\n    tip = \"Consume the item.\", --Tip when hovering over the function\n    icon = \"icon16/cup.png\", --Icon for the function\n    onRun = function(item, data)\n        item.player:EmitSound(\"items/battery_pickup.wav\") --Play a cool sound\n        item.player:SetHealth(item.player:Health() + item.health) --Give health to player when they consume\n        item.player:notifyLocalized(\"You \"..string.lower(item.action)..\" \"..string.lower(item.name)..\" for \"..item.health..\" health.\") --Send message to player\n    end\n}\n</code></pre> <p>Now, in the food folder, we can create as many different food items as we please, and each will inherit these default values.</p> <p>In the food folder, I will create a milk item. Call it <code>sh_milk.lua</code></p> <pre><code>ITEM.name = \"Milk\"\nITEM.model = \"models/Gibs/HGIBS.mdl\"\nITEM.desc = \"Full fat cow's milk.\"\nITEM.width = 1\nITEM.height = 1\nITEM.health = 5\nITEM.action = \"drink\"\n</code></pre> <p>The new milk item will inherit everything from the food base, such as the consume function, however, we editted some values, such as health and action, so when the consume function is used on the item, it will use these values instead.</p> <p>If you want multiple bases, create individual files in the base folder, and a new folder for each base type.</p>"},{"location":"guides/development/developing_schema/#the-sh_schemalua-file","title":"The <code>sh_schema.lua</code> File","text":"<p>The sh_schema.lua file is a crucial part of the schema. Upon creating it, enter the following code:</p> <pre><code>SCHEMA.name = \"Cool Schema\" -- the Name of your Schema, as it appears in-game\nSCHEMA.author = \"You\" -- the Author of the schema\nSCHEMA.desc = \"A schema for the people to learn from.\" -- A brief description of what the gamemode is about\n\nnut.currency.set(\"$\", \"dollar\", \"dollars\") --Symbol, singular tense of currency, plural tense of currency\n</code></pre> <p>While you can contain all of your code within this one file, you may want to create additional files in the schema and spread the code among them, for convenience and security. To do this, use the following:</p> <pre><code>nut.util.include(\"sh_commands.lua\") -- this allows code within the sh_commands.lua file to be readable by the schema.\nnut.util.includeDir(\"hooks\") -- this allows all files within the hooks folder in the schema folder to be readable by the schema\n</code></pre> <p>Warning</p> <p>Keep in mind that if you try to use functions or variables defined in these external files before they are included in the schema, they will not be available.</p> <p>Note</p> <p>Keep in mind that if you want to add folders that are default to nutscript, such as <code>classes, meta</code> or <code>libs</code>, it is not necessary to include them.</p>"},{"location":"guides/development/developing_schema/#developing-plugins","title":"Developing Plugins","text":"<p>If you wish to create your own plugins, in order to keep the schema modular and organized, head over to Developing Plugins.</p>"},{"location":"guides/development/factions/","title":"Factions","text":"<p>Factions are just a wrapper over the normal <code>team</code> library. Essentially, each faction associates a table with a team. So, extra information can be stored for teams (e.g. salary, descriptions, etc...).</p>"},{"location":"guides/development/factions/#creating-factions","title":"Creating Factions","text":"<p>Additional functions can be found here</p> <p>To create a faction for your schema, first create a <code>factions</code> folder in your gamemode's <code>schema</code> folder if it does not exist. Here is an example.</p> <p>One faction corresponds to one file within the <code>factions</code> folder. The files in the factions folder should be named <code>sh_&lt;identifier&gt;.lua</code> where <code>&lt;identifier&gt;</code> is a string containing only alphanumeric characters and underscores. By convention, <code>&lt;identifier&gt;</code> should be lowercase as well.</p> <p>When the file is loaded, a global table called <code>FACTION</code> is available. This is the table that contains information about your faction. The following keys are required:</p> <pre><code>FACTION.name = \"Faction Name\"\nFACTION.desc = \"A description of your faction\"\nFACTION.color = Color(255, 255, 255)\n</code></pre> Note <p>The <code>name</code> and <code>desc</code> are translatable.</p> <p>Then, you can add any other details you would like for your faction.</p> <p>At the end of the file, you must include the following:</p> <pre><code>TEAM_EXAMPLE = FACTION.index\n</code></pre> <p>The <code>FACTION.index</code> is a numeric value that is the team ID for your faction. This is the ID that is used with the team library. So, here the ID is stored to a global variable for later use.</p> <p>Now, your faction is done!</p>"},{"location":"guides/development/factions/#player-models","title":"Player Models","text":"<p>You can specify a list of available player models for your faction using <code>FACTION.models</code>. This should be a table containing strings. For example:</p> <pre><code>FACTION.models = {\n    \"models/player/hostage/hostage_01.mdl\",\n    \"models/player/hostage/hostage_02.mdl\",\n    \"models/player/hostage/hostage_03.mdl\",\n    \"models/player/hostage/hostage_04.mdl\"\n}\n</code></pre> Note <p>By default and if unspecified in the faction file, <code>FACTION.models</code> is set to the list of HL2 citizen NPC models.</p>"},{"location":"guides/development/factions/#skins","title":"Skins","text":"<p>An entry in <code>FACTION.models</code> can have a specific skin set by using a table containing two values instead of a string. The first value in the table should be the model path as a string. The second value should be a number containing the skin number. For example:</p> <pre><code>FACTION.models = {\n    -- Prisoner guard Combine soldier (red eyes).\n    {\"models/player/combine_soldier.mdl\", 1},\n    -- Normal Combine soldier (blue eyes).\n    \"models/player/combine_soldier.mdl\"\n}\n</code></pre>"},{"location":"guides/development/factions/#bodygroups","title":"Bodygroups","text":"<p>Similarly, an entry in <code>FACTION.models</code> can have certain bodygroups set. Instead of having a table with only two values, a table with 3 values is used. The third value is either string where the ith digit represents the value for the ith bodygroup, or a table where each key is the bodygroup id, and the value is the bodygroup value. For example:</p> With StringWith Table <pre><code>FACTION.models = {\n    -- Metropolice with a manhack.\n    {\"models/police.mdl\", 0, \"01\"},\n    -- Normal metropolice without a manhack.\n    \"models/police.mdl\"\n}\n</code></pre> <pre><code>FACTION.models = {\n    -- Metropolice with a manhack.\n    {\"models/police.mdl\", 0,\n        {\n            manhack = 1,\n        }\n    },\n    -- Normal metropolice without a manhack.\n    \"models/police.mdl\"\n}\n</code></pre> <p>Warning</p> <p>This feature is only available from version 1.2.2, and as such, will not work with previous versions of NutScript</p>"},{"location":"guides/development/factions/#salary","title":"Salary","text":"<p>Characters within certain factions can be paid a salary. To set a salary for your faction, you just need to add the following line:</p> <pre><code>FACTION.pay = 123\n</code></pre> <p>The value for <code>FACTION.pay</code> is how much the character will be paid. By default, players are paid in intervals of the set value for the <code>salaryInterval</code> config (which by default is 300 seconds). However, you can change this yourself by adding the following line:</p> <pre><code>FACTION.payTime = 60\n</code></pre> <p>The value for <code>FACTION.payTime</code> is how often characters of this faction get paid in seconds.</p> <p>If you want more control over salary payment, you can adjust the pay amount by returning a different amount in the <code>GetSalaryAmount(client, faction)</code> hook. You can also adjust the salary interval by returning a new interval in the <code>GetSalaryInterval(client, faction)</code>hook.</p>"},{"location":"guides/development/factions/#default-weapons","title":"Default Weapons","text":"<p>You can specify a list of weapons to give to a player of a certain faction when they spawn by setting <code>FACTION.weapons</code>. It should be set to table containing strings where the strings are the class of the weapons. For example:</p> <pre><code>FACTION.weapons = {\"weapon_crowbar\"}\n</code></pre> Weapons are not items <p><code>FACTION.weapons</code> gives <code>SWEPs</code>, not NutScript items. As such, if you intend for the weapons used by the faction to possess nutscript functionality, such as dropping or taking inventory space, you should set up a hook that gives the items on spawn/character creation/etc.</p>"},{"location":"guides/development/factions/#how-do-i-_-when-a-player-in-my-faction-spawns","title":"How do I _ when a player in my faction spawns?","text":"<p>Whenever a player of a specific faction spawns, the faction's onSpawn method is called with the player passed in. So, if you want something to happen when a player of your faction spawns, just add some behavior to the onSpawn method. For example:</p> <pre><code>FACTION.health = 150\nFACTION.armor = 100\n\nfunction FACTION:onSpawn(client)\n    -- Custom health and armor for players in this faction.\n    client:SetHealth(self.health)\n    client:SetArmor(self.armor)\nend\n</code></pre>"},{"location":"guides/development/factions/#whitelists","title":"Whitelists","text":"<p>If you only want factions to be accessible to players who are whitelisted for that faction, you should set</p> <pre><code>FACTION.isDefault = false\n</code></pre> <p>Factions are accessible to everyone by default</p> <p>By default, <code>FACTION.isDefault = true</code>. If <code>FACTION.isDefault</code> is set to true, a character could be created with that faction. If it is set to false, a character can only be created with that faction if the player creating the character is whitelisted for the faction.</p>"},{"location":"guides/development/factions/#accessing-faction-data","title":"Accessing Faction Data","text":"<p>The <code>FACTION</code> table is no longer available after the file for the faction loads. However, you can access the faction data later in two ways:</p> <ul> <li>Using <code>nut.faction.list</code> or</li> <li>Using <code>nut.faction.indices</code></li> </ul> <p>The \"nice name\" for a faction is the name of the faction file after the <code>sh_</code> prefix, but before the <code>.lua</code> extension. For example, if your faction file was called <code>sh_citizen.lua</code>, the nice name is <code>citizen</code>. You can access faction data using the nice name with <code>nut.faction.list[niceName]</code> where <code>niceName</code> is a string containing the nice name.</p> <p>If you have the index of the faction (the value is <code>FACTION.index</code> that should have been stored in a global variable), you can use <code>nut.faction.indices[index]</code> where <code>index</code> is a number with the value of the faction index.</p> <p>Example</p> <p>If a faction \"Citizen\" was created with the index <code>FACTION_CITIZEN</code>, ie. <pre><code>FACTION_CITIZEN = FACTION.INDEX\n</code></pre> Then <code>FACTION_CITIZEN</code> can be used as the index for the \"Citizen\" faction, via</p> <pre><code>local factionData = nut.faction.indices[FACTION_CITIZEN]\n</code></pre>"},{"location":"guides/development/factions/#player-limits","title":"Player Limits","text":"<p>You can limit the number of online players for a specific faction using <code>FACTION.limit</code>. Simply set <code>FACTION.limit</code> to a number, where that number is the maximum number of players in that faction allowed at one time. For example:</p> <pre><code>FACTION.limit = 5\n</code></pre> <p>means only five players are allowed to be in that faction at one time.</p> <p>In some cases, it may be more useful to have the limit as a percentage of the number of players on the server. Instead of using a whole number, simply use a decimal number less than 1. For example, to make it so only 1/4th of the players on the server are allowed to be in a specific faction, you would have</p> <pre><code>FACTION.limit = 0.25\n</code></pre> <p>If you need more control over the limit, you can use the <code>FACTION:onCheckLimitReached(character, client)</code> function. This is a function that should return <code>true</code> if the limit has been reached (that is, the player is not allowed to load a character of that faction), or <code>false</code> otherwise. For example, you could make the limit a percentage of the number of players on another faction:</p> <pre><code>function FACTION:onCheckLimitReached(character, client)\n    return team.NumPlayers(self.index) &lt; math.Round(team.NumPlayers(FACTION_OTHER) * 0.25)\nend\n</code></pre> <p>Similarly, there is the <code>CheckFactionLimitReached(faction, character, client)</code> hook. It is similar to the function above, except <code>faction</code> is the faction table for some faction. The default implementation actually implements the above features.</p>"},{"location":"guides/development/plugin_example/","title":"Plugin Example","text":"<p>We will take Permakill as an example of a simple plugin. This plugin automatically bans a character if it dies in certain ways.</p>"},{"location":"guides/development/plugin_example/#starting","title":"Starting","text":"<ol> <li>We will create a new file called <code>permakill.lua</code> in the plugins folder.</li> <li> <p>In it, we will add the following initial information:</p> <pre><code>PLUGIN.name = \"Permakill\"\nPLUGIN.author = \"Thadah Denyse\"\nPLUGIN.desc = \"Adds permanent death in the server options.\"\n</code></pre> </li> </ol>"},{"location":"guides/development/plugin_example/#configuration","title":"Configuration","text":"<p>We want our plugin to be easily configurated in-game easily, for instance whether it's active at all or dying by falling off a high place will effectively kill our character permanently. Fortunately, NutScript's Framework Libraries are very rich, and will enable us in this process.</p> <p>In this case, we are going to use <code>nut.config.add</code> to add our in-game configuration for the server admin.</p> <p>We want to be able to activate or deactivate permakill as we please, so we will make a configuration that allows us to do so:</p> <pre><code>nut.config.add(\"pkActive\", false, \"Whether or not permakill is activated on the server.\", nil, {\n    category = \"Permakill\"\n})\n</code></pre> <ul> <li> <p>The first argument will be the key, which must the unique, therefore adding a prefix (in this case pk) to it is advisable.</p> </li> <li> <p>The second argument is the default value. In this case we will use a boolean value, and we will leave Permakill deactivated by default, therefore false</p> </li> <li> <p>The third argument is a description, so the admin knows what he is doing when changing the argument.</p> </li> <li> <p>The fourth argument is about our configuration using a callback function. The callback will trigger every time the configuration is changed. This doesn't apply to us so we will set it as <code>nil</code></p> </li> <li> <p>The fifth argument is the data of the configuration, which is a table. In this case, we will set what category should the plugin have inside the Configuration tab, therefore <code>{category = \"Permakill\"}</code></p> </li> </ul> <p>The same goes for the configuration about the world being able to permakill us:</p> <pre><code>nut.config.add(\"pkWorld\", false, \"Whether or not world and self damage produce permanent death.\", nil, {\n    category = \"Permakill\"\n})\n</code></pre>"},{"location":"guides/development/plugin_example/#functions","title":"Functions","text":"<p>To apply our configurations, we will want somewhere to call them. In this case we will call them inside functions, but it's not limited to them. You can call them from item functions, entities, derma and so on.</p> <p>We will use the default Gmod functions PlayerDeath and PlayerSpawn, but prefixed with <code>PLUGIN</code> instead of <code>GM</code>, to prevent overriding them.</p>"},{"location":"guides/development/plugin_example/#playerdeath","title":"PlayerDeath","text":"<ol> <li> <p>First, the <code>PlayerDeath</code> function. The function will have the same arguments as its <code>GM</code> counterpart, therefore:     <pre><code>function PLUGIN:PlayerDeath(client, inflictor, attacker)\n</code></pre></p> </li> <li> <p>We don't want to affect our client, but the client's character, therefore we will create a local variable calling the Framework Class <code>client:getChar</code>:     <pre><code>function PLUGIN:PlayerDeath(client, inflictor, attacker)\n    local character = client:getChar()\n</code></pre></p> </li> <li> <p>Next, we will want to know if Permakill is active in the server. This is where our Framework Library <code>nut.config.get</code> enters the scene:     <pre><code>function PLUGIN:PlayerDeath(client, inflictor, attacker)\n    local character = client:getChar()\n\n    if (nut.config.get(\"pkActive\")) then\n</code></pre></p> </li> <li> <p>After that, we want to know if World Damage has been activated inside the server and we want to make it not permanently kill people if it's deactivated, therefore:     <pre><code>function PLUGIN:PlayerDeath(client, inflictor, attacker)\n    local character = client:getChar()\n\n    if (nut.config.get(\"pkActive\")) then\n        if not (nut.config.get(\"pkWorld\") and (client == attacker or inflictor:IsWorld() then\n            return\n        end\n</code></pre></p> <p>Note</p> <p>The <code>return</code> will invalidate everything that comes after that line, making the permakill ineffective if the World Damage is set to false</p> </li> <li> <p>Now that we have verified everything we wanted, we will use <code>character:setData</code> so that we know that character has been permakilled, this ends the PlayerDeath function as well:     <pre><code>function PLUGIN:PlayerDeath(client, inflictor, attacker)\n    local character = client:getChar()\n\n    if (nut.config.get(\"pkActive\")) then\n        if not (nut.config.get(\"pkWorld\") and (client == attacker or inflictor:IsWorld() then\n            return\n        end\n        character:setData(\"permakilled\", true)\n    end\nend\n</code></pre></p> </li> </ol>"},{"location":"guides/development/plugin_example/#playerspawn","title":"PlayerSpawn","text":"<p>Now that we have set the ways the player is permakilled, we will set what happens when a permakilled player tries to spawn again.</p> <ol> <li> <p>First, we will get the player's character:     <pre><code>function PLUGIN:PlayerSpawn(client)\n    local character = client:getChar()\nend\n</code></pre></p> </li> <li> <p>After that, we will verify if permakill is active on the server and we will use <code>character:getData</code> to verify if the player has been permakilled. If both turn out to be true, we will ban that character with <code>character:ban</code>, so the player can't use it again:     <pre><code>function PLUGIN:PlayerSpawn(client)\n    local character = client:getChar()\n    if (nut.config.get(\"pkActive\") and character and character:getData(\"permakilled\")) then\n        character:ban()\n    end\nend\n</code></pre></p> </li> </ol> <p>This finishes our plugin. You can access the full code here.</p>"},{"location":"guides/installation/getting_started/","title":"Getting Started","text":"<p>To fully use NutScript, you need the framework and a schema.</p>"},{"location":"guides/installation/getting_started/#frameworks","title":"Frameworks","text":"<p>There are currently 3 versions of the NutScript framework available:</p> <ol> <li>NutScript 1.2<ul> <li>The latest and currently maintained version of NutScript. It is highly recommended to use this version.</li> </ul> </li> <li>NutScript 1.1<ul> <li>The previous version of NutScript. While it is functional and numerous schemas and plugins exist for it, it is no longer maintained.</li> </ul> </li> <li>NutScript 1.0<ul> <li>Legacy, original version of NutScript. It is not recommended to use this version.</li> </ul> </li> </ol> NutScript 1.2 vs NutScript 1.1-beta <p>There also exists the NutScript 1.1-beta version, however, it is simply Version 1.2 in early stages of development. As such, any plugin that is made for 1.1-beta is fully compatible with 1.2 (but not 1.1 or 1.0).</p>"},{"location":"guides/installation/getting_started/#schemas","title":"Schemas","text":"<p>It is highly recommended to create your own schema, as you will have full control and understanding of what the schema does. To do so, it is recommended to download the skeleton schema and start from there.</p> <p>However, there are also numerous premade schemas that publicly exist, and you can use them as a reference.</p> <ol> <li>Respite by Chancerawr</li> <li>Metro 2033 by ts-co/Pilot</li> <li>HL2RP by Chessnut</li> </ol>"},{"location":"guides/installation/getting_started/#editors","title":"Editors","text":"<p>If you do not have one already, it is highly recommended to use an editor to develop your code. A few recommended editors are:</p> <ol> <li>Visual Studio Code</li> <li>Notepad++</li> <li>Sublime Text</li> <li>Atom</li> </ol> <p>Once you have both the framework and schema downloaded, head over to Installing the Framework/Schema.</p>"},{"location":"guides/installation/installing_framework/","title":"Installing the Framework and Schema","text":"<p>Note</p> <p>The guide assumes you are installing to a dedicated server. However, NutScript can be installed and run locally on your game, and ran via the gamemode selection on the bottom right of the main menu. To locate the folder location on your local machine, open your Steam Library, right click Garry's Mod -&gt; Properties -&gt; Installed Files -&gt; Browse -&gt; garrysmod folder.</p> <p>Once you have both the framework and schema downloaded, locate the gamemodes folder in your garrysmod folder. This is located in the server's root folder (where the srcds executable is located).</p> <p></p>"},{"location":"guides/installation/installing_framework/#installing-the-framework","title":"Installing the Framework","text":"<ol> <li>Place the downloaded framework folder into the gamemodes folder.</li> <li>Rename the framework folder to nutscript. (Case is important, as most server hosts run on Linux, which is case-sensitive)</li> </ol>"},{"location":"guides/installation/installing_framework/#installing-the-schema","title":"Installing the Schema","text":"<ol> <li>Place the downloaded schema folder into the gamemodes folder.</li> <li>Rename the schema folder into whatever you want your gamemode to be.</li> <li>Open the schema folder and locate the .txt file. Rename it to the same name as your schema folder name.</li> <li> <p>Open the .txt file. It should look like this</p> <pre><code>\"skeleton\"\n{\n    \"base\"      \"nutscript\"\n    \"title\"     \"Skeleton\"\n    \"author\"    \"Your Name\"\n    \"menusystem\"  \"1\"\n    \"category\"  \"rp\"\n}\n</code></pre> <ul> <li><code>skeleton</code> is replaced by the name of your schema</li> <li><code>title</code> is the presented title of the gamemode as seen by the gamemode selection bar on the bottom-right corner of the menu</li> <li><code>author</code> is the name of the schema's author</li> <li><code>menusystem</code> defines whether the gamemode/server should appear in the multiplayer server list.</li> <li><code>category</code> is the category the gamemode is in.</li> </ul> <p>Rename the first line to the name of your schema and optionally the author. Keep the rest as is.</p> </li> </ol> <p></p>"},{"location":"guides/installation/installing_framework/#congratulations-you-have-successfully-installed-nutscript","title":"Congratulations, you have successfully installed NutScript","text":"<p>If you wish to further develop and/or modify your schema and gamemode, carry on over to Developing the Schema.</p>"},{"location":"wiki_contribution/documentation_guidelines/","title":"Documentation Guidelines","text":"<p>NutScript Wiki uses a modified version of LDoc to automatically generate markdown outputs. As such, a strict template must be used to ensure that all the documentation is generated properly.</p>"},{"location":"wiki_contribution/documentation_guidelines/#beginning-of-the-documented-lua-file","title":"Beginning of the documented .lua file","text":""},{"location":"wiki_contribution/documentation_guidelines/#struct-summary-and-description","title":"Struct Summary and Description","text":"<p>The first thing required in a documented file is a brief summmary and description of the module/class/etc. being documented.</p> <p>The summary consists of a single sentence and MUST end with a period. It appears in the reference sheet to explain what the struct is and does.</p> <p>The description can contain additional information about the struct, with detailed information, examples and warnings. The description only appears in the struct's documentation page.</p> <p>The best way to format the summary and description are within a code block.</p> <pre><code>--[[--\nThis is a summary.\n\nThis is a description. The description can be as long as it needs to be, so long as its all within the comment block. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi iaculis ligula at nibh facilisis luctus. Phasellus faucibus metus at neque euismod, eget fringilla elit porta.\nProin a neque eu augue pretium posuere. Etiam nec purus sed nibh gravida posuere.\n]]\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#module-declaration","title":"Module Declaration","text":"<p>Each .lua file that contains documented structs/functions must begin with a module declaration.</p> <p>Valid declarations are:</p> Declaration Description <code>@module</code> A library, such as <code>nut.char</code> or <code>nut.config</code> <code>@classmod</code> A class, such as <code>Character</code> or <code>Inventory</code> <code>@hook</code> A collection of functions that can be used in hooks, such as <code>GM:Nick(client)</code> <p>Additionally, the struct name is required, after the declaration type. This will be the name under which the documentation will save under.</p> <pre><code>--[[--\nThis is a summary.\n\nThis is a description. The description can be as long as it needs to be, so long as its all within the comment block. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi iaculis ligula at nibh facilisis luctus. Phasellus faucibus metus at neque euismod, eget fringilla elit porta.\nProin a neque eu augue pretium posuere. Etiam nec purus sed nibh gravida posuere.\n]]\n-- @classmod character\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#documenting-functions","title":"Documenting Functions","text":""},{"location":"wiki_contribution/documentation_guidelines/#function-description","title":"Function Description","text":"<p>All functions that required generated documentation must start with a comment with 3 dashes (<code>---</code>) with a description of the function.</p> <pre><code>--- A function that takes 3 arguments\nfunction exampleFunc(a, b, c)\n...\nend\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#realm","title":"Realm","text":"<p>All functions exist within a realm, either <code>client</code>, <code>server</code>, or <code>shared</code> (both). The realm of the function can be defined with the <code>--@realm</code> tag. If omitted, the realm is assumed to be <code>shared</code> by default.</p> <pre><code>--- A shared function that takes 3 arguments\n-- @realm shared\nfunction exampleFunc(a, b, c)\n...\nend\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#arguments","title":"Arguments","text":"<p>Each argument required by the function needs to be documented per line. The tag depends on the argument type:</p> Tag Argument <code>-- @int</code> An integer <code>-- @number</code> A generic number, can be a float <code>-- @string</code> A string <code>-- @bool</code> A boolean <code>-- @tab</code> A table <code>-- @func</code> A function <code>-- @entity</code> An Entity <code>-- @client</code> A Client Entity (ie Player) <code>-- @character</code> A NutScript character object <code>-- @vector</code> A Vector object <code>-- @angle</code> An Angle object <code>-- @param</code> A generic parameter without a specific type. The type specified will be \"vararg\" <code>-- @tparam [type]</code> A parameter with a custom type. The type name comes before the argument name <p>After the tag, the name of the argument is defined, followed by its description.</p> <pre><code>--- A function that takes 3 number arguments\n-- @realm shared\n-- @int a the numerator\n-- @int b the denominator\n-- @int c the rounding number\nfunction exampleFunc(a, b, c)\n...\nend\n</code></pre> <p>@tparam type and name</p> <p>When using <code>@tparam</code>, the custom type comes before the name.</p> <pre><code>-- @tparam char newChar the new character\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#optional-and-default-arguments","title":"Optional and Default Arguments","text":"<p>If an argument is optional, the <code>[opt]</code> modifier is added. If the argument has a default value if none is provided, the <code>[opt='default']</code> modifier is used, where <code>'default'</code> is the default value.</p> <pre><code>--- A function that takes 3 number arguments\n-- @realm shared\n-- @int[opt=2] a the numerator, which if not provided, will use 2 as a default\n-- @int b the denominator\n-- @int[opt] c the optional rounding number\nfunction exampleFunc(a, b, c)\n...\nend\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#returns","title":"Returns","text":"<p>If the function has one or more return values, you can use the <code>-- @return</code> tag. If the returned value has a specific type, use <code>-- @treturn [type]</code> instead</p> <pre><code>--- A function that takes 3 number arguments\n-- @realm shared\n-- @int[opt=2] a the numerator, which if not provided, will use 2 as a default\n-- @int b the denominator\n-- @int[opt] c the optional rounding number\n-- @treturn number a returned number\n-- @return another custom returned value that doesn't have a specific type\nfunction exampleFunc(a, b, c)\n...\nend\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#usage","title":"Usage","text":"<p>If you want to provide a usage example of the function, you can use the <code>-- @usage</code> tag.</p> <p>If the usage example can fit in a single line, the example can be typed in the same line as the tag <pre><code>-- @usage local calcValue = exampleFunc(1, 2, 3)\n</code></pre></p> <p>Alternatively, if you require more than one line, for instance for context, comments until the next tag will be used in the usage example</p> <pre><code>--- A function that takes 3 number arguments\n-- @realm shared\n-- @int[opt=2] a the numerator, which if not provided, will use 2 as a default\n-- @int b the denominator\n-- @int[opt] c the optional rounding number\n-- @treturn number a returned number\n-- @return another custom returned value that doesn't have a specific type\n-- @usage\n-- local a, b, c = 1, 2, 3\n-- local calcValue = exampleFunc(a, b, c)\n\nfunction exampleFunc(a, b, c)\n...\nend\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#other-tags","title":"Other tags","text":"<ol> <li><code>-- @internal</code> marks the function as internal (This is used internally - although you're able to use it you probably shouldn't.)</li> <li><code>-- @see</code> links to other documentation, for context or further usage</li> <li><code>-- @pluginwarning [pluginName]</code> adds a warning that the function is defined within a plugin, and as such its functionality might differ in different schemas</li> </ol>"},{"location":"wiki_contribution/documentation_guidelines/#sections","title":"Sections","text":"<p>Sometimes, especially with plugins, you may need to manually define sections within a file, for instance when meta-methods are located between library functions. You can easily define a new section with the <code>-- @section</code> tag. If a section tag appears multiple times within a file, the documented functions will be sorted into one place.</p> <pre><code>--- Section Name\n-- @section hooks\n</code></pre>"},{"location":"wiki_contribution/documentation_guidelines/#result","title":"Result","text":"<p>The example documentation above would provide the following result on the developer wiki</p> inventory:exampleFunc (a, b, c)"},{"location":"wiki_contribution/documentation_guidelines/#sh_inventoryexamplefunc","title":"sh_inventory:exampleFunc","text":"<p>A function that takes 3 number arguments Parameters: integer a optional. default: 2 the numerator, which if not provided, will use 2 as a default</p> <p>integer b the denominator</p> <p>integer c optional the optional rounding number</p> <p>Returns: number a returned number</p> <p>another custom returned value that doesn't have a specific type</p> <p>Usage: <ul> <pre><code>local a, b, c = 1, 2, 3\nlocal calcValue = exampleFunc(a, b, c)\n</code></pre> </ul></p>"},{"location":"wiki_contribution/reference_sheet/","title":"Reference sheet","text":"<p>When writing documentation, refer to this page for templates</p>"},{"location":"wiki_contribution/reference_sheet/#functions","title":"Functions","text":"<pre><code>--- Function summary\n-- @realm shared/client/server\n-- @pluginwarning Area\n-- @param a parameter\n-- @tparam[opt=\"example\"] type an optional parameter with a type\n-- @return a returned value\n-- @treturn type a returned value with a type\n-- @see otherExample\n-- @usage\n-- local a, b, c = 1, 2, 3\n-- local calcValue = exampleFunc(a, b, c)\n</code></pre>"}]}